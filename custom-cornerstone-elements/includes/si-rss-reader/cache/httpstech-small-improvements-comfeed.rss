<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	xmlns:georss="http://www.georss.org/georss" xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#" xmlns:media="http://search.yahoo.com/mrss/"
	>

<channel>
	<title>Small Improvements</title>
	<atom:link href="https://tech.small-improvements.com/feed/" rel="self" type="application/rss+xml" />
	<link>https://tech.small-improvements.com</link>
	<description>Tech blog</description>
	<lastBuildDate>Fri, 10 Mar 2017 14:01:28 +0000</lastBuildDate>
	<language>en</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>http://wordpress.com/</generator>
<cloud domain='tech.small-improvements.com' port='80' path='/?rsscloud=notify' registerProcedure='' protocol='http-post' />
<image>
		<url>https://secure.gravatar.com/blavatar/0d65c91970e6bc3ee3016b621024b622?s=96&#038;d=https%3A%2F%2Fs2.wp.com%2Fi%2Fbuttonw-com.png</url>
		<title>Small Improvements</title>
		<link>https://tech.small-improvements.com</link>
	</image>
	<atom:link rel="search" type="application/opensearchdescription+xml" href="https://tech.small-improvements.com/osd.xml" title="Small Improvements" />
	<atom:link rel='hub' href='https://tech.small-improvements.com/?pushpress=hub'/>
	<item>
		<title>Ladda &#8211; A New Library for Client-Side API Caching</title>
		<link>https://tech.small-improvements.com/2017/03/09/ladda-a-new-library-for-client-side-api-caching/</link>
		<pubDate>Thu, 09 Mar 2017 16:21:20 +0000</pubDate>
		<dc:creator><![CDATA[Peter Crona]]></dc:creator>
				<category><![CDATA[Open-Source]]></category>

		<guid isPermaLink="false">http://tech.small-improvements.com/?p=3732</guid>
		<description><![CDATA[In an ideal world, caching wouldn’t be something we have to care about. However, with more and more mobile users on slow and limited data plans, as well as more advanced applications, we can’t escape reality. We need caching. As a response to this we have invested quite some time in Ladda – a dependency-free client side library for &#8230; <a href="https://tech.small-improvements.com/2017/03/09/ladda-a-new-library-for-client-side-api-caching/" class="more-link">Continue reading <span class="screen-reader-text">Ladda &#8211; A New Library for Client-Side API&#160;Caching</span></a><img alt="" border="0" src="https://pixel.wp.com/b.gif?host=tech.small-improvements.com&#038;blog=44218990&#038;post=3732&#038;subd=smallimprovementstech&#038;ref=&#038;feed=1" width="1" height="1" />]]></description>
				<content:encoded><![CDATA[<p><img data-attachment-id="3788" data-permalink="https://tech.small-improvements.com/2017/03/09/ladda-a-new-library-for-client-side-api-caching/laddalogo-horiz-color-2-2/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2017/03/laddalogo-horiz-color-21.png?w=700" data-orig-size="300,66" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="LaddaLogo-horiz-color (2)" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2017/03/laddalogo-horiz-color-21.png?w=700?w=300" data-large-file="https://smallimprovementstech.files.wordpress.com/2017/03/laddalogo-horiz-color-21.png?w=700?w=300" class="alignnone size-full wp-image-3788" style="border:0;" src="https://smallimprovementstech.files.wordpress.com/2017/03/laddalogo-horiz-color-21.png?w=700" alt="LaddaLogo-horiz-color (2)" srcset="https://smallimprovementstech.files.wordpress.com/2017/03/laddalogo-horiz-color-21.png 300w, https://smallimprovementstech.files.wordpress.com/2017/03/laddalogo-horiz-color-21.png?w=150 150w" sizes="(max-width: 300px) 100vw, 300px"   /></p>
<p>In an ideal world, caching wouldn’t be something we have to care about. However, with more and more mobile users on slow and limited data plans, as well as more advanced applications, we can’t escape reality. We need caching. As a response to this we have invested quite some time in <a class="external-link" href="https://github.com/petercrona/ladda" rel="nofollow">Ladda</a> – a <strong>dependency-free</strong> client side library for caching, invalidation of caches and handling different representations of the same data. Ladda is implemented using <strong>JavaScript</strong> (ES2015), framework agnostic (works equally well with React, Vue, Angular or vanilla JavaScript) and designed to make it easy for you to implement a caching solution without increasing the complexity of your application code.</p>
<p>Read on to learn how Ladda can be useful for you, how it helps you implement a sophisticated caching solution, and for a comparison of Ladda with other popular solutions for client-side API caching.</p>
<h1 id="Ladda-ANewLibraryforClient-SideAPICaching-ScenariosWhereLaddaCanHelpYou">Scenarios Where Ladda Can Help You</h1>
<p>There’s no such thing as a free lunch. Caching speeds up your application, but it comes at a cost: it increases the complexity of your application code. The following examples will show you how Ladda can help you to reduce this cost in some common scenarios.</p>
<h2 id="Ladda-ANewLibraryforClient-SideAPICaching-JustCaching">Just Caching</h2>
<p>The most straightforward usage of a cache is simply to cache a value, and if it has been previously cached, return it directly from the cache. Consider that you make an API call “getUsers”. The most straightforward solution for implementing caching would look something like:</p>
<pre style="color:#000000;background:#ffffff;padding-left:30px;"><span style="color:#800000;font-weight:bold;">const</span> getUsers <span style="color:#808030;">=</span> <span style="color:#808030;">(</span><span style="color:#808030;">)</span> <span style="color:#808030;">=</span><span style="color:#808030;">&gt;</span> <span style="color:#800080;">{</span>
   <span style="color:#800000;font-weight:bold;">if</span> <span style="color:#808030;">(</span><span style="color:#808030;">!</span>inCache<span style="color:#808030;">(</span>key<span style="color:#808030;">)</span> <span style="color:#808030;">||</span> hasExpired<span style="color:#808030;">(</span>ttl<span style="color:#808030;">,</span> key<span style="color:#808030;">)</span><span style="color:#808030;">)</span> <span style="color:#800080;">{</span>
       <span style="color:#800000;font-weight:bold;">const</span> res <span style="color:#808030;">=</span> api<span style="color:#808030;">.</span>user<span style="color:#808030;">.</span>getUsers<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
       putInCache<span style="color:#808030;">(</span>key<span style="color:#808030;">,</span> res<span style="color:#808030;">)</span><span style="color:#800080;">;</span>
   <span style="color:#800080;">}</span>
   <span style="color:#800000;font-weight:bold;">return</span> fromCache<span style="color:#808030;">(</span>key<span style="color:#808030;">)</span><span style="color:#800080;">;</span>
<span style="color:#800080;">}</span>
</pre>
<p>When using Ladda your application code would look like:</p>
<pre style="color:#000000;background:#ffffff;padding-left:30px;"><span style="color:#800000;font-weight:bold;">const</span> getUsers <span style="color:#808030;">=</span> api<span style="color:#808030;">.</span>user<span style="color:#808030;">.</span>getUsers<span style="color:#800080;">;</span>
</pre>
<p>Note how we separate what we want to do (getting the users) from the caching logic, which is just an optimization. This is a pretty simple example, which might not be a sufficient motivation to add a library to your application, but it quickly gets quite complicated as we start to manipulate our data.</p>
<h2 id="Ladda-ANewLibraryforClient-SideAPICaching-CacheInvalidation">Cache Invalidation</h2>
<p>Stale data is your new enemy as soon as you introduce caching. Consider the example of users again. You are getting all users, but then you spot a typo in one user’s surname and correct it. Now you are left with two choices: either you update the cache used by “getUsers”, or you remove the cache and refetch the data the next time someone calls “getUsers”. Let’s consider the latter option first. It could look like:</p>
<pre style="color:#000000;background:#ffffff;padding-left:30px;"><span style="color:#800000;font-weight:bold;">const</span> updateUser <span style="color:#808030;">=</span> <span style="color:#808030;">(</span>modifiedUser<span style="color:#808030;">)</span> <span style="color:#808030;">=</span><span style="color:#808030;">&gt;</span> <span style="color:#800080;">{</span>
    api<span style="color:#808030;">.</span>user<span style="color:#808030;">.</span>updateUser<span style="color:#808030;">(</span>modifiedUser<span style="color:#808030;">)</span><span style="color:#800080;">;</span>
    clearGetUserCache<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
<span style="color:#800080;">}</span>
</pre>
<p>With Ladda it would look like:</p>
<pre style="color:#000000;background:#ffffff;padding-left:30px;"><span style="color:#800000;font-weight:bold;">const</span> updateUser <span style="color:#808030;">=</span> api<span style="color:#808030;">.</span>user<span style="color:#808030;">.</span>updateUser<span style="color:#800080;">;</span>
</pre>
<p>Ladda would clear the cache for you, you just need to tell Ladda what to invalidate in a configuration, which lives outside of your application. However, by default Ladda will pick the harder option, it will update the cache for you. This comes with the benefit that after updating your user, you can call “getUsers” and get all the users directly from the cache, with your updated user of course.</p>
<p>Ladda has more to offer, but I’ll leave that for you to <a class="external-link" href="https://petercrona.gitbooks.io/ladda/content/" rel="nofollow">read about</a>. You’ve heard a lot of promises and seen some simple code. But as you might have suspected, you still need to specify things such as the TTL (time to live), what to invalidate, and which function is updating the user and which one is retrieving users somewhere.</p>
<h1 id="Ladda-ANewLibraryforClient-SideAPICaching-Howdoesitwork">How does it work</h1>
<p>The first claim, that Ladda allows you to add caching without making your application code more complex, is achieved by separating your application code from your caching logic. Ladda allows you in a concise and declarative way to express what TTL you want for a specific entity, such as user, and what you want to invalidate when something happens. Going back to the simple updateUser example, where you simply invalidate the “getUsers” cache, it would look like:</p>
<pre style="color:#000000;background:#ffffff;padding-left:30px;"><span style="color:#800080;">{</span>
    user<span style="color:#800080;">:</span> <span style="color:#800080;">{</span>
        api<span style="color:#800080;">:</span> userApi<span style="color:#808030;">,</span>
        invalidates<span style="color:#800080;">:</span> <span style="color:#808030;">[</span><span style="color:#800000;">'</span><span style="color:#0000e6;">user</span><span style="color:#800000;">'</span><span style="color:#808030;">]</span>
    <span style="color:#800080;">}</span>
<span style="color:#800080;">}</span>
</pre>
<p>Of course, you don&#8217;t even have to specify that &#8216;user&#8217; invalidates its own cache, since Ladda will update the cache in place for you, so you can simply write:</p>
<pre style="color:#000000;background:#ffffff;padding-left:30px;"><span style="color:#800080;">{</span>
    user<span style="color:#800080;">:</span> <span style="color:#800080;">{</span>
        api<span style="color:#800080;">:</span> userApi
    <span style="color:#800080;">}</span>
<span style="color:#800080;">}</span>
</pre>
<p>And rely on Ladda to always ensure that “getUsers” gives you an up-to-date list of users. Now, the only thing left is to create “userApi”. But this is something that you probably already had, it is just a bunch of functions communicating with your user endpoints. Let’s pretend that you have a file:</p>
<pre style="color:#000000;background:#ffffff;padding-left:30px;"><span style="color:#800000;font-weight:bold;">export</span> <span style="color:#800000;font-weight:bold;">function</span> getUsers<span style="color:#808030;">(</span><span style="color:#808030;">)</span> <span style="color:#800080;">{</span> <span style="color:#800000;font-weight:bold;">return</span> doHttpGetRequestAndReturnPromise<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span> <span style="color:#800080;">}</span>

<span style="color:#800000;font-weight:bold;">export</span> <span style="color:#800000;font-weight:bold;">function</span> updateUser<span style="color:#808030;">(</span>user<span style="color:#808030;">)</span> <span style="color:#800080;">{</span> doHttpPutRequestAndReturn200<span style="color:#808030;">(</span>user<span style="color:#808030;">)</span><span style="color:#800080;">;</span> <span style="color:#800080;">}</span>
</pre>
<p>Ladda only requires you to specify the CRUD-operations:</p>
<pre style="color:#000000;background:#ffffff;padding-left:30px;">getUsers<span style="color:#808030;">.</span>operation <span style="color:#808030;">=</span> <span style="color:#800000;">'</span><span style="color:#0000e6;">READ</span><span style="color:#800000;">'</span><span style="color:#800080;">;</span>
<span style="color:#800000;font-weight:bold;">export</span> <span style="color:#800000;font-weight:bold;">function</span> getUsers<span style="color:#808030;">(</span><span style="color:#808030;">)</span> <span style="color:#800080;">{</span> <span style="color:#800000;font-weight:bold;">return</span> doHttpGetRequestAndReturnPromise<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span> <span style="color:#800080;">}</span>

updateUser<span style="color:#808030;">.</span>operation <span style="color:#808030;">=</span> <span style="color:#800000;">'</span><span style="color:#0000e6;">UPDATE</span><span style="color:#800000;">'</span><span style="color:#800080;">;</span>
<span style="color:#800000;font-weight:bold;">export</span> <span style="color:#800000;font-weight:bold;">function</span> updateUser<span style="color:#808030;">(</span>user<span style="color:#808030;">)</span> <span style="color:#800080;">{</span> doHttpPutRequestAndReturn200<span style="color:#808030;">(</span>user<span style="color:#808030;">)</span><span style="color:#800080;">;</span> <span style="color:#800080;">}</span>
</pre>
<p>That is everything, just adding metadata directly to your functions and putting your entity in a configuration object. There are, of course, plenty more options, such as one mentioned already, TTL. You will find them all in the <a class="external-link" href="https://petercrona.gitbooks.io/ladda/content/docs/basics/Configuration.html" rel="nofollow">documentation</a>. You’ll also find <a class="external-link" href="https://github.com/petercrona/ladda/tree/master/examples" rel="nofollow">complete examples in the repo</a> to make it easy for you to get started. Don’t forget to have a look at <a class="external-link" href="https://rwieruch.github.io/ladda-react-example/" rel="nofollow">Search Hacker News with Ladda</a> and this <a href="http://opensource.small-improvements.com/ladda-example-crud/">contact list</a> (which uses all the supported CRUD operations) for examples that you can play around with.</p>
<p>Before we move on, let&#8217;s just have a quick look at a final example and what HTTP-requests it will result in:</p>
<pre style="color:#000000;background:#ffffff;padding-left:30px;">api<span style="color:#808030;">.</span>user<span style="color:#808030;">.</span>getUsers<span style="color:#808030;">(</span><span style="color:#808030;">)</span> 
<span style="color:#696969;">  // GET-request was sent</span>
  <span style="color:#808030;">.</span>then<span style="color:#808030;">(</span><span style="color:#808030;">(</span><span style="color:#808030;">)</span> <span style="color:#808030;">=</span><span style="color:#808030;">&gt;</span> api<span style="color:#808030;">.</span>user<span style="color:#808030;">.</span>updateSurname<span style="color:#808030;">(</span>user<span style="color:#808030;">)</span><span style="color:#808030;">)</span> 
<span style="color:#696969;">  // PUT-request was sent</span>
  <span style="color:#808030;">.</span>then<span style="color:#808030;">(</span>api<span style="color:#808030;">.</span>user<span style="color:#808030;">.</span>getUsers<span style="color:#808030;">)</span><span style="color:#800080;">;</span> 
<span style="color:#696969;">  // No request was made! Directly from the cache.</span>
</pre>
<p>A good caching solution tries to maximize the number of cache hits, Ladda is no exception.</p>
<figure data-shortcode="caption" id="attachment_3771" style="width: 506px" class="wp-caption aligncenter"><img data-attachment-id="3771" data-permalink="https://tech.small-improvements.com/2017/03/09/ladda-a-new-library-for-client-side-api-caching/ladda-release-2/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2017/03/ladda-release1.png?w=700" data-orig-size="506,462" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Ladda Release" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2017/03/ladda-release1.png?w=700?w=300" data-large-file="https://smallimprovementstech.files.wordpress.com/2017/03/ladda-release1.png?w=700?w=506" class="alignnone size-full wp-image-3771" src="https://smallimprovementstech.files.wordpress.com/2017/03/ladda-release1.png?w=700" alt="Ladda Release" srcset="https://smallimprovementstech.files.wordpress.com/2017/03/ladda-release1.png 506w, https://smallimprovementstech.files.wordpress.com/2017/03/ladda-release1.png?w=150 150w, https://smallimprovementstech.files.wordpress.com/2017/03/ladda-release1.png?w=300 300w" sizes="(max-width: 506px) 100vw, 506px"   /><figcaption class="wp-caption-text">Fig 1. Sequence diagram showing the result of calling getUsers followed by updating a user and then calling getUser again. Note that we do not make a HTTP-request for the final getUsers call.</figcaption></figure>
<p>Ladda is not the first attempt to make caching simple, I believe that it can be the best choice in some cases, but it is important to look into all available options. Let’s do a brief comparison between Ladda and some other popular caching solutions.</p>
<h1 id="Ladda-ANewLibraryforClient-SideAPICaching-ComparisonWithOtherSolutions">Comparison With Other Solutions</h1>
<p>First off, keep in mind that I’m not an expert in the other technologies, but I’ve tried to make the comparisons in an objective manner. One very popular solution is Relay. The big difference between Ladda and Relay is that Relay is built for GraphQL. Hence, Ladda and Relay are not really two alternatives to compare, since if you have a GraphQL backend, Relay is without doubt the better choice, but otherwise it isn’t a choice.</p>
<p>Another solution is <a class="external-link" href="https://amplitude.engineering/introducing-redux-query-7734e7215b3b" rel="nofollow">redux-query</a>. One key difference is already revealed in the name, it is specifically designed for use with Redux. Ladda can be used with any framework as well as without a framework. But let’s assume we are using React and Redux to make a viable comparison. The most prominent difference is that redux-query influences how you write your application code. This means that it has a greater buy-in than Ladda, but it also means that it can handle more things for you. If you want a more complete solution and don’t mind the buy-in, redux-query might be the best choice. But if you have your own solutions in place and just want to speed up your application by caching, then Ladda is probably a better choice. You can potentially add or remove Ladda without changing a single line of application code.</p>
<p>But perhaps more importantly, it’s about which code style you prefer and which library can offer the features you need. Ladda lets you stay with simple function calls that are “magically” very quick sometimes (when you hit the cache). To get users you simply call “getUsers()”. Other solutions tend to use a more declarative approach, where you fetch your data by creating an object describing what data you want.</p>
<p>There are a bunch of other caching libraries in JavaScript, for example js-cache (<a class="external-link" href="https://github.com/dirkbonhomme/js-cache" rel="nofollow">https://github.com/dirkbonhomme/js-cache</a>). These are more generic than Ladda. They don’t support automatic invalidation logic, views of entities, or many other pieces of functionality that are often required in a sophisticated caching solution.</p>
<h1 id="Ladda-ANewLibraryforClient-SideAPICaching-Conclusion">Conclusion</h1>
<p>We hope that you will find Ladda useful and keep it in mind next time you need client-side caching for your API layer. Ladda is dependency-free, only 14KB, has high test coverage and allows you to specify your caching logic in a declarative and very simple way. Give it a shot and let us know what you think!</p><br />  <a rel="nofollow" href="http://feeds.wordpress.com/1.0/gocomments/smallimprovementstech.wordpress.com/3732/"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/smallimprovementstech.wordpress.com/3732/" /></a> <img alt="" border="0" src="https://pixel.wp.com/b.gif?host=tech.small-improvements.com&#038;blog=44218990&#038;post=3732&#038;subd=smallimprovementstech&#038;ref=&#038;feed=1" width="1" height="1" />]]></content:encoded>
		
		<media:content url="http://0.gravatar.com/avatar/cdfa4c0759926eb266588b213e3acc59?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">petercrona</media:title>
		</media:content>

		<media:content url="http://smallimprovementstech.files.wordpress.com/2017/03/laddalogo-horiz-color-21.png" medium="image">
			<media:title type="html">LaddaLogo-horiz-color (2)</media:title>
		</media:content>

		<media:content url="http://smallimprovementstech.files.wordpress.com/2017/03/ladda-release1.png" medium="image">
			<media:title type="html">Ladda Release</media:title>
		</media:content>
	</item>
		<item>
		<title>Our journey migrating 100k lines of code from AngularJS to React (Chapter 1)</title>
		<link>https://tech.small-improvements.com/2017/01/25/how-to-migrate-an-angularjs-1-app-to-react/</link>
		<pubDate>Wed, 25 Jan 2017 12:14:46 +0000</pubDate>
		<dc:creator><![CDATA[Sebastian Fröstl]]></dc:creator>
				<category><![CDATA[AngularJS]]></category>
		<category><![CDATA[JavaScript]]></category>
		<category><![CDATA[React]]></category>
		<category><![CDATA[angularjs]]></category>
		<category><![CDATA[migrate]]></category>

		<guid isPermaLink="false">http://tech.small-improvements.com/?p=2971</guid>
		<description><![CDATA[Intro This is the first post of a series explaining the story and technical learnings we had from starting to migrate from AngularJS to React. Check out the github repo for examples and the full code. Our frontend story so far At Small Improvements we’re aiming to make meaningful feedback available for every employee in every &#8230; <a href="https://tech.small-improvements.com/2017/01/25/how-to-migrate-an-angularjs-1-app-to-react/" class="more-link">Continue reading <span class="screen-reader-text">Our journey migrating 100k lines of code from AngularJS to React (Chapter&#160;1)</span></a><img alt="" border="0" src="https://pixel.wp.com/b.gif?host=tech.small-improvements.com&#038;blog=44218990&#038;post=2971&#038;subd=smallimprovementstech&#038;ref=&#038;feed=1" width="1" height="1" />]]></description>
				<content:encoded><![CDATA[<h2><img data-attachment-id="3153" data-permalink="https://tech.small-improvements.com/2017/01/25/how-to-migrate-an-angularjs-1-app-to-react/web/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2017/01/react-angular-illustration1.jpg?w=700" data-orig-size="3588,1666" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;Web&quot;,&quot;orientation&quot;:&quot;1&quot;}" data-image-title="Web" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2017/01/react-angular-illustration1.jpg?w=700?w=300" data-large-file="https://smallimprovementstech.files.wordpress.com/2017/01/react-angular-illustration1.jpg?w=700?w=700" class="alignnone size-full wp-image-3153" src="https://smallimprovementstech.files.wordpress.com/2017/01/react-angular-illustration1.jpg?w=700" alt="Web" srcset="https://smallimprovementstech.files.wordpress.com/2017/01/react-angular-illustration1.jpg?w=700 700w, https://smallimprovementstech.files.wordpress.com/2017/01/react-angular-illustration1.jpg?w=1400 1400w, https://smallimprovementstech.files.wordpress.com/2017/01/react-angular-illustration1.jpg?w=150 150w, https://smallimprovementstech.files.wordpress.com/2017/01/react-angular-illustration1.jpg?w=300 300w, https://smallimprovementstech.files.wordpress.com/2017/01/react-angular-illustration1.jpg?w=768 768w, https://smallimprovementstech.files.wordpress.com/2017/01/react-angular-illustration1.jpg?w=1024 1024w" sizes="(max-width: 700px) 100vw, 700px"   /></h2>
<h2>Intro</h2>
<p>This is the first post of a series explaining the story and technical learnings we had from starting to migrate from AngularJS to React. Check out the <a href="https://github.com/sfroestl/angular-react-migration">github repo</a> for examples and the full code.</p>
<h2>Our frontend story so far</h2>
<p><span style="font-weight:400;">At Small Improvements we’re aiming to make meaningful feedback available for every employee in every organisation. This also implies that we provide the best experience for our users. Therefore we’ve been on the front line to adopt AngularJS over Wicket, and started to rewrite our core features in AngularJS back in 2012. We saw the great potential in having a dynamic single page application.</span></p>
<p><span style="font-weight:400;">In 2014, when the Angular team announced Angular 2, we already had a very large application and had gained a whole lot of knowledge using Angular. We were worried and excited at the same time. We faced a lot of challenges scaling Angular 1 and implementing best practices while moving fast.</span></p>
<p><span style="font-weight:400;">In 2015 we sent almost all developers to AngularConnect in London, expecting the Angular 2 BETA release. Two of our developers gave a talk to share our approach to and learnings from writing a huge AngularJS application. We came back with the impression that Angular 2 was still very unstable and no clear migration strategy seemed to be available.</span></p>
<figure data-shortcode="caption" id="attachment_media-10" style="width: 1500px" class="wp-caption aligncenter"><img data-attachment-id="3184" data-permalink="https://tech.small-improvements.com/2017/01/25/how-to-migrate-an-angularjs-1-app-to-react/anguarconnenct/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2017/01/anguarconnenct.jpg?w=700" data-orig-size="1500,1000" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="anguarconnenct" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2017/01/anguarconnenct.jpg?w=700?w=300" data-large-file="https://smallimprovementstech.files.wordpress.com/2017/01/anguarconnenct.jpg?w=700?w=700" class="aligncenter size-full wp-image-3184" src="https://smallimprovementstech.files.wordpress.com/2017/01/anguarconnenct.jpg?w=700" alt="anguarconnenct.jpg" srcset="https://smallimprovementstech.files.wordpress.com/2017/01/anguarconnenct.jpg?w=700 700w, https://smallimprovementstech.files.wordpress.com/2017/01/anguarconnenct.jpg?w=1400 1400w, https://smallimprovementstech.files.wordpress.com/2017/01/anguarconnenct.jpg?w=150 150w, https://smallimprovementstech.files.wordpress.com/2017/01/anguarconnenct.jpg?w=300 300w, https://smallimprovementstech.files.wordpress.com/2017/01/anguarconnenct.jpg?w=768 768w, https://smallimprovementstech.files.wordpress.com/2017/01/anguarconnenct.jpg?w=1024 1024w" sizes="(max-width: 700px) 100vw, 700px"   /><figcaption class="wp-caption-text">The Small Improvements Team in London at AngularConnect</figcaption></figure>
<h2>Testing React plus Relay and GraphQL in the field</h2>
<p><span style="font-weight:400;">Our CEO has a strong engineering background, so he’s very open to play around with new technology and loves </span><a href="https://tech.small-improvements.com/2016/08/15/hack-it-ship-it/"><span style="font-weight:400;">hackathons and ship-it weeks</span></a><span style="font-weight:400;">. That’s why he was very open to giving React (with Relay and GraphQL) a chance. As a company, our approach to evaluating a new technology is to have one of our dev teams make an initial tech spike. In this case </span><a href="https://careers.small-improvements.com/company/team-green/"><span style="font-weight:400;">Team Green</span></a><span style="font-weight:400;"> decided to experiment with the novel technology in the field by coding a prototype for a new feature in the new tech stack.  We found React extremely promising and it solved a lot of challenges we had with Angular 1. Relay was cool, but lacking some core features at that time, such as support for invalidation or lazy loading of expensive fields. </span></p>
<p style="text-align:justify;"><span style="font-weight:400;">Also adopting Relay would mean a complete buy-in from our whole stack, Frontend and API layer, due to the dependency on GraphQL.</span></p>
<p>So to sum it up, the outcome was: React: OMG!, Relay: Cool, but…</p>
<h3>Our Reasons to go with React</h3>
<ul>
<li style="font-weight:400;"><span style="font-weight:400;">Easy to write: It&#8217;s closer to vanilla JavaScript and components come without any boilerplate configuration</span></li>
<li style="font-weight:400;"><span style="font-weight:400;">Great use for atomic components. In contrary to AngularJS where every scope is “expensive”</span></li>
<li style="font-weight:400;"><span style="font-weight:400;">Easier to understand, React is the view library and has a slim API</span></li>
<li style="font-weight:400;"><span style="font-weight:400;">Designed with performance in mind: Concept of virtual DOM</span></li>
<li style="font-weight:400;"><span style="font-weight:400;">Attractive for recruiting, new technology attracts passionate developers, because they are keen to adopt new technologies</span></li>
<li style="font-weight:400;"><span style="font-weight:400;">New challenges for the dev team, learn and grow!</span></li>
</ul>
<p><span style="font-weight:400;">When we used it for a large feature &#8211; a new Activity Stream &#8211; it multiplied our investment, due to an unclear focus. We were shifting between trying out the new technology and building first iterations on the feature. </span></p>
<h3>Lessons learned</h3>
<p>Use a smaller feature as playground when experimenting with a new technology.</p>
<ul>
<li style="font-weight:400;"><span style="font-weight:400;"><a href="https://tech.small-improvements.com/2016/10/18/onboarding-your-team-to-react-redux/">Take the time to experiment with new technology, it’s worth it</a>. Even if you decide against it, you’ve learned a lot and have a more profound knowledge in that area.</span></li>
<li style="font-weight:400;"><span style="font-weight:400;">Share and discuss your progress with regular updates. This is especially important since it includes other developers into the learning process.</span></li>
</ul>
<h2>The migration strategy</h2>
<p><span style="font-weight:400;">Now that we’ve decided to move from AngularJS to React, we saw two options for a migration strategy: A complete rewrite of our frontend or a slow transition. Let me rephrase that: We saw one option: A smooth and focused transition. Nobody wanted to spend months rewriting our whole application, although that would have been a fun argument with our CEO. At Small Improvements, we have a strong customer centred culture, so we didn’t want to slow down too much on our mission. Additionally it is a high risk to rewrite everything with a technology that nobody is experienced with. </span></p>
<p><span style="font-weight:400;">Each week all Software Developers at Small Improvements meet for a developer exchange meeting. That’s the place where we share learnings, discuss ideas but also decide on larger undertakings. In this case we discussed and decided on the idea for the migration strategy a sub team of developers has developed and presented.</span></p>
<h3>The basic idea</h3>
<p><span style="font-weight:400;">A frontend application is built like a tree, since HTML documents imply a structure of nested HTML elements. Modern web applications are structured in nested components. A simplified mock of an application displaying a list of comments may look like that:</span></p>
<p><img data-attachment-id="3003" data-permalink="https://tech.small-improvements.com/2017/01/25/how-to-migrate-an-angularjs-1-app-to-react/screen-shot-2017-01-24-at-09-50-02/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2017/01/screen-shot-2017-01-24-at-09-50-02.png?w=700" data-orig-size="871,509" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="screen-shot-2017-01-24-at-09-50-02" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2017/01/screen-shot-2017-01-24-at-09-50-02.png?w=700?w=300" data-large-file="https://smallimprovementstech.files.wordpress.com/2017/01/screen-shot-2017-01-24-at-09-50-02.png?w=700?w=700" class="alignnone size-full wp-image-3003" src="https://smallimprovementstech.files.wordpress.com/2017/01/screen-shot-2017-01-24-at-09-50-02.png?w=700" alt="Screen Shot 2017-01-24 at 09.50.02.png" srcset="https://smallimprovementstech.files.wordpress.com/2017/01/screen-shot-2017-01-24-at-09-50-02.png?w=700 700w, https://smallimprovementstech.files.wordpress.com/2017/01/screen-shot-2017-01-24-at-09-50-02.png?w=150 150w, https://smallimprovementstech.files.wordpress.com/2017/01/screen-shot-2017-01-24-at-09-50-02.png?w=300 300w, https://smallimprovementstech.files.wordpress.com/2017/01/screen-shot-2017-01-24-at-09-50-02.png?w=768 768w, https://smallimprovementstech.files.wordpress.com/2017/01/screen-shot-2017-01-24-at-09-50-02.png 871w" sizes="(max-width: 700px) 100vw, 700px"   /></p>
<p><span style="font-weight:400;">The corresponding component tree looks like this:</span></p>
<p><span style="font-weight:400;"><img data-attachment-id="3004" data-permalink="https://tech.small-improvements.com/2017/01/25/how-to-migrate-an-angularjs-1-app-to-react/screen-shot-2017-01-24-at-09-50-06/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2017/01/screen-shot-2017-01-24-at-09-50-06.png?w=700" data-orig-size="927,657" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="screen-shot-2017-01-24-at-09-50-06" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2017/01/screen-shot-2017-01-24-at-09-50-06.png?w=700?w=300" data-large-file="https://smallimprovementstech.files.wordpress.com/2017/01/screen-shot-2017-01-24-at-09-50-06.png?w=700?w=700" class="alignnone size-full wp-image-3004" src="https://smallimprovementstech.files.wordpress.com/2017/01/screen-shot-2017-01-24-at-09-50-06.png?w=700" alt="Screen Shot 2017-01-24 at 09.50.06.png" srcset="https://smallimprovementstech.files.wordpress.com/2017/01/screen-shot-2017-01-24-at-09-50-06.png?w=700 700w, https://smallimprovementstech.files.wordpress.com/2017/01/screen-shot-2017-01-24-at-09-50-06.png?w=150 150w, https://smallimprovementstech.files.wordpress.com/2017/01/screen-shot-2017-01-24-at-09-50-06.png?w=300 300w, https://smallimprovementstech.files.wordpress.com/2017/01/screen-shot-2017-01-24-at-09-50-06.png?w=768 768w, https://smallimprovementstech.files.wordpress.com/2017/01/screen-shot-2017-01-24-at-09-50-06.png 927w" sizes="(max-width: 700px) 100vw, 700px"   />We looked at how complex it would be to replace and rewrite this tree.</span></p>
<p><img data-attachment-id="3007" data-permalink="https://tech.small-improvements.com/2017/01/25/how-to-migrate-an-angularjs-1-app-to-react/screen-shot-2017-01-24-at-09-50-34/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2017/01/screen-shot-2017-01-24-at-09-50-34.png?w=700" data-orig-size="1762,759" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="screen-shot-2017-01-24-at-09-50-34" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2017/01/screen-shot-2017-01-24-at-09-50-34.png?w=700?w=300" data-large-file="https://smallimprovementstech.files.wordpress.com/2017/01/screen-shot-2017-01-24-at-09-50-34.png?w=700?w=700" class="alignnone size-full wp-image-3007" src="https://smallimprovementstech.files.wordpress.com/2017/01/screen-shot-2017-01-24-at-09-50-34.png?w=700" alt="screen-shot-2017-01-24-at-09-50-34" srcset="https://smallimprovementstech.files.wordpress.com/2017/01/screen-shot-2017-01-24-at-09-50-34.png?w=700 700w, https://smallimprovementstech.files.wordpress.com/2017/01/screen-shot-2017-01-24-at-09-50-34.png?w=1400 1400w, https://smallimprovementstech.files.wordpress.com/2017/01/screen-shot-2017-01-24-at-09-50-34.png?w=150 150w, https://smallimprovementstech.files.wordpress.com/2017/01/screen-shot-2017-01-24-at-09-50-34.png?w=300 300w, https://smallimprovementstech.files.wordpress.com/2017/01/screen-shot-2017-01-24-at-09-50-34.png?w=768 768w, https://smallimprovementstech.files.wordpress.com/2017/01/screen-shot-2017-01-24-at-09-50-34.png?w=1024 1024w" sizes="(max-width: 700px) 100vw, 700px"   /></p>
<p><span style="font-weight:400;">The main Application component is hard, it usually is wired up with complex logic like routing. Similar the Navigation component. The routing is tightly coupled with the main components and in case of AngularJS central piece of the framework. A NavItem is easier, it displays a link and has some trivial logic like “am I active” and displays a link with text. The content part of our app consists of a sub tree displaying a list of comments. The ComponentList is trickier, since it is hooked to the data layer and may contain state like: what item is selected etc. Again we see the Comment is the easiest part of that tree, basically rendering a Comment and handling user interaction. The Text component for instance is simply responsible for rendering the text. That component is easiest to re-write in another technology. </span></p>
<p><span style="font-weight:400;">Our conclusion was that the further down the component tree you go, the easier it gets to replace components. </span><span style="font-weight:400;">With that in mind, we defined guidelines and looked at requirements for that migration strategy.</span></p>
<h2>Guidelines</h2>
<p><b>How to tackle new features?</b></p>
<p><span style="font-weight:400;">We wanted a full buy in, so we defined our first guideline:</span></p>
<ol>
<li><span style="font-weight:400;"> Every new feature will be built in React &amp; Redux.</span></li>
</ol>
<p><b>How to tackle existing code?</b></p>
<ol start="2">
<li style="text-align:justify;"><span style="font-weight:400;"> If possible start to migrate leaf-first up to a whole component tree until you hit the routing module.</span></li>
<li style="text-align:justify;"><span style="font-weight:400;"> If you touch old code/ components, estimate how much it would cost to rewrite it, if less than 30 minutes, rewrite, else get a second opinion.</span></li>
</ol>
<p><b>How to migrate common UI components?</b></p>
<p style="text-align:justify;"><span style="font-weight:400;">The basic building blocks of an application are generic, reusable UI components, like Dropdowns, Buttons, Forms etc. Those are necessary to build new components with React. </span></p>
<ol start="4">
<li style="text-align:justify;"><span style="font-weight:400;"> Re-write generic UI components when you need them, and let other devs know that they now exist. Use that chance to improve the design/ UX.</span></li>
</ol>
<h2>Requirements</h2>
<ul>
<li style="font-weight:400;"><span style="font-weight:400;">Component based architecture</span></li>
<li style="font-weight:400;text-align:justify;"><span style="font-weight:400;">Angular Directives structured as container/ presenter components, read more </span><a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0"><span style="font-weight:400;">here</span></a></li>
<li style="font-weight:400;"><span style="font-weight:400;">Separation of concerns/ View/ Logic/ Service/ Communication layers and Injectable actions to encapsulate side effects like http calls etc</span></li>
</ul>
<p>Fortunately our frontend design already fulfilled the requirements. If you want more information on how to design and structure your application watch our talk <a href="https://www.youtube.com/watch?v=eel3mV0alEc">How to design large AngularJS applications that scale</a><span style="font-weight:400;"> from AngularConnect or </span><a href="https://www.youtube.com/watch?v=KdIretrDPhA"><span style="font-weight:400;">Refactoring To Components by Tero Parviainen</span></a><span style="font-weight:400;">.</span></p>
<h2>Building bridges</h2>
<p>We found that it was easiest to start by replacing the leaves of our application component tree. The missing piece was a bridge between the “old” world and the “new” world. Meaning AngularJS and React, in our case. How can we use React to render the Text component and get it’s data from an AngularJS component?</p>
<h3>Rendering React within AngularJS</h3>
<p><span style="font-weight:400;">A React component is, well, just another UI component. It gets data and actions via props and is rendered to the DOM. It is responsible for internal state and handles user interaction. So a simple concept of our bridge could be an AngularJS component working as thin layer with the responsibility to pass on data to the React Component.</span></p>
<p style="text-align:justify;"><span style="font-weight:400;">Let’s aim to answer our first uncertainty: Can we use an AngularJS component to render a React component?</span></p>
<p style="text-align:justify;">This is our AngularJS comment component:</p>
<pre style="background:#fdf6e3;color:#586e75;"><span style="color:#586e75;"><code>module.exports <span style="color:#859900;">=</span> angular.module<span style="color:#93a1a1;">(</span><span style="color:#269186;"><span style="color:#c60000;">'</span>ngReactExample.comment<span style="color:#c60000;">'</span></span>, <span style="color:#268bd2;">[</span>
<span style="color:#268bd2;">]</span><span style="color:#93a1a1;">)</span>.component<span style="color:#93a1a1;">(</span><span style="color:#269186;"><span style="color:#c60000;">'</span>comment<span style="color:#c60000;">'</span></span>, <span style="color:#268bd2;">{</span>
    bindings: <span style="color:#268bd2;">{</span>
        comment: <span style="color:#269186;"><span style="color:#c60000;">'</span>&lt;<span style="color:#c60000;">'</span></span>,
    <span style="color:#268bd2;">}</span>,
    template: <span style="color:#269186;"><span style="color:#c60000;">'</span></span></code></span><span style="color:#586e75;">{{ $ctrl.comment.text }}</span><span style="color:#c60000;">'</span><code style="color:#586e75;">,
    <span style="color:#a57800;">controller</span>: <span style="color:#268bd2;">function</span>() <span style="color:#268bd2;">{</span>
    <span style="color:#268bd2;">}</span>
<span style="color:#268bd2;">}</span><span style="color:#93a1a1;">)</span>;
</code></pre>
<p>Our React version of a comment looks like that</p>
<pre style="background:#fdf6e3;color:#586e75;"><span style="color:#073642;font-weight:bold;">const</span> Comment <span style="color:#859900;">=</span> <span style="color:#93a1a1;">(</span>props<span style="color:#93a1a1;">)</span> <span style="color:#859900;">=</span><span style="color:#859900;">&gt;</span> <span style="color:#268bd2;">{</span>
    <span style="color:#859900;">return</span> <span style="color:#93a1a1;">(</span>
         <span style="color:#268bd2;">{</span> props.comment.text <span style="color:#268bd2;">}</span>
    <span style="color:#93a1a1;">)</span>;
<span style="color:#268bd2;">}</span>;
<span style="color:#073642;font-weight:bold;">export</span> <span style="color:#859900;">default</span> Comment;
</pre>
<p><span style="font-weight:400;">The React component is rendered to the DOM by calling:</span></p>
<pre style="background:#fdf6e3;color:#586e75;">ReactDOM.render<span style="color:#93a1a1;">(&lt;</span>Comment /&gt;, element<span style="color:#93a1a1;">)</span>;
</pre>
<p><span style="font-weight:400;">Let’s try to call this within an AngularJS component:</span></p>
<pre style="background:#fdf6e3;color:#586e75;"><span style="color:#859900;">import</span> Comment from <span style="color:#269186;"><span style="color:#c60000;">'</span>./Comment<span style="color:#c60000;">'</span></span>;

module.exports <span style="color:#859900;">=</span> angular.module<span style="color:#93a1a1;">(</span><span style="color:#269186;"><span style="color:#c60000;">'</span>ngReactExample.comment<span style="color:#c60000;">'</span></span>, <span style="color:#268bd2;">[</span>
<span style="color:#268bd2;">]</span><span style="color:#93a1a1;">)</span>.component<span style="color:#93a1a1;">(</span><span style="color:#269186;"><span style="color:#c60000;">'</span>comment<span style="color:#c60000;">'</span></span>, <span style="color:#268bd2;">{</span>
    bindings: <span style="color:#268bd2;">{</span>
        comment: <span style="color:#269186;"><span style="color:#c60000;">'</span>&lt;<span style="color:#c60000;">'</span></span>,
    <span style="color:#268bd2;">}</span>,
    <span style="color:#a57800;">controller</span>: <span style="color:#268bd2;">function</span>() <span style="color:#268bd2;">{</span>
        ReactDOM.render<span style="color:#93a1a1;">(</span><span style="color:#859900;">&lt;</span>Comment /<span style="color:#859900;">&gt;</span>, <span style="color:#859900;">$</span>element<span style="color:#268bd2;">[</span><span style="color:#269186;">0</span><span style="color:#268bd2;">]</span><span style="color:#93a1a1;">)</span>;
    <span style="color:#268bd2;">}</span>
<span style="color:#268bd2;">}</span><span style="color:#93a1a1;">)</span>;
</pre>
<p><span style="font-weight:400;">It works! This is the simple yet powerful starting point from where we can now build our AngularJS – React bridge. The elegant part is that we don’t need to mess around with DOM node ids or use the DOM API to query the element we want to render React to. We can directly pass the reference to the AngularJS element. You might have noticed a little detail &#8211; at the moment we’re only rendering the React component when this component is initialized. In a dynamic app we want dynamic components. So we want to trigger the rendering whenever the component changes. To achieve this we can use the lifecycle method $onChanges. </span></p>
<pre style="background:#fdf6e3;color:#586e75;"><code><span style="color:#859900;">import</span> Comment from <span style="color:#269186;"><span style="color:#c60000;">'</span>./Comment<span style="color:#c60000;">'</span></span>;

<span style="color:#073642;font-weight:bold;">const</span> render <span style="color:#859900;">=</span> <span style="color:#93a1a1;">(</span>element<span style="color:#93a1a1;">)</span> <span style="color:#859900;">=</span><span style="color:#859900;">&gt;</span> <span style="color:#268bd2;">{</span>
    ReactDOM.render<span style="color:#93a1a1;">(</span>
        <span style="color:#859900;">&lt;</span>Comment /<span style="color:#859900;">&gt;</span>,
        element
    <span style="color:#93a1a1;">)</span>;
<span style="color:#268bd2;">}</span>

module.exports <span style="color:#859900;">=</span> angular.module<span style="color:#93a1a1;">(</span><span style="color:#269186;"><span style="color:#c60000;">'</span>ngReactExample.comment<span style="color:#c60000;">'</span></span>, <span style="color:#268bd2;">[</span>
<span style="color:#268bd2;">]</span><span style="color:#93a1a1;">)</span>.component<span style="color:#93a1a1;">(</span><span style="color:#269186;"><span style="color:#c60000;">'</span>comment<span style="color:#c60000;">'</span></span>, <span style="color:#268bd2;">{</span>
    bindings: <span style="color:#268bd2;">{</span>
        comment: <span style="color:#269186;"><span style="color:#c60000;">'</span>&lt;<span style="color:#c60000;">'</span></span>,
    <span style="color:#268bd2;">}</span>,
    <span style="color:#a57800;">controller</span>: <span style="color:#268bd2;">function</span>($element) <span style="color:#268bd2;">{</span>
        <span style="color:#073642;font-weight:bold;">const</span> <span style="color:#859900;">$</span>ctrl <span style="color:#859900;">=</span> <span style="color:#268bd2;">this</span>;
        <span style="color:#859900;">$</span>ctrl.<span style="color:#859900;">$</span>onChanges <span style="color:#859900;">=</span> <span style="color:#93a1a1;">(</span><span style="color:#93a1a1;">)</span> <span style="color:#859900;">=</span><span style="color:#859900;">&gt;</span> render<span style="color:#93a1a1;">(</span><span style="color:#859900;">$</span>element<span style="color:#268bd2;">[</span><span style="color:#269186;">0</span><span style="color:#268bd2;">]</span><span style="color:#93a1a1;">)</span>;
    <span style="color:#268bd2;">}</span>
<span style="color:#268bd2;">}</span><span style="color:#93a1a1;">)</span>;
</code></pre>
<p><span style="font-weight:400;">Now whenever our AngularJS component receives changes we’re redrawing the React component. </span></p>
<p><span style="font-weight:400;">With this working we can tackle the next question: How we can pass data down to our React component?</span></p>
<h3>Passing data from AngularJS to React</h3>
<p><span style="font-weight:400;">In React we use props as interface to pass data to a component. An AngularJS directive receives inputs via bindings, so we will get the comment data from an outside component and pass it down to our React component. The full working bridge looks like this:</span></p>
<pre style="background:#fdf6e3;color:#586e75;font-size:14px;"><code><span style="color:#859900;">import</span> Comment from <span style="color:#269186;"><span style="color:#c60000;">'</span>./presenter<span style="color:#c60000;">'</span></span>;

<span style="color:#073642;font-weight:bold;">const</span> render <span style="color:#859900;">=</span> <span style="color:#93a1a1;">(</span>element, props<span style="color:#93a1a1;">)</span> <span style="color:#859900;">=</span><span style="color:#859900;">&gt;</span> <span style="color:#268bd2;">{</span>
    ReactDOM.render<span style="color:#93a1a1;">(</span>
        <span style="color:#859900;">&lt;</span>Comment <span style="color:#268bd2;">{</span> ...props <span style="color:#268bd2;">}</span> /<span style="color:#859900;">&gt;</span>,
        element
    <span style="color:#93a1a1;">)</span>;
<span style="color:#268bd2;">}</span>

module.exports <span style="color:#859900;">=</span> angular.module<span style="color:#93a1a1;">(</span><span style="color:#269186;"><span style="color:#c60000;">'</span>ngReactExample.comment<span style="color:#c60000;">'</span></span>, <span style="color:#268bd2;">[</span>
<span style="color:#268bd2;">]</span><span style="color:#93a1a1;">)</span>.component<span style="color:#93a1a1;">(</span><span style="color:#269186;"><span style="color:#c60000;">'</span>comment<span style="color:#c60000;">'</span></span>, <span style="color:#268bd2;">{</span>
    bindings: <span style="color:#268bd2;">{</span>
        comment: <span style="color:#269186;"><span style="color:#c60000;">'</span>&lt;<span style="color:#c60000;">'</span></span>,
    <span style="color:#268bd2;">}</span>,
    <span style="color:#a57800;">controller</span>: <span style="color:#268bd2;">function</span>($element) <span style="color:#268bd2;">{</span>
        <span style="color:#073642;font-weight:bold;">const</span> <span style="color:#859900;">$</span>ctrl <span style="color:#859900;">=</span> <span style="color:#268bd2;">this</span>;
        <span style="color:#859900;">$</span>ctrl.<span style="color:#859900;">$</span>onChanges <span style="color:#859900;">=</span> <span style="color:#93a1a1;">(</span><span style="color:#93a1a1;">)</span> <span style="color:#859900;">=</span><span style="color:#859900;">&gt;</span> render<span style="color:#93a1a1;">(</span><span style="color:#859900;">$</span>element<span style="color:#268bd2;">[</span><span style="color:#269186;">0</span><span style="color:#268bd2;">]</span>, <span style="color:#268bd2;">{</span> comment: <span style="color:#859900;">$</span>ctrl.comment <span style="color:#268bd2;">}</span><span style="color:#93a1a1;">)</span>;
    <span style="color:#268bd2;">}</span>
<span style="color:#268bd2;">}</span><span style="color:#93a1a1;">)</span>;
</code></pre>
<h3></h3>
<h3>Fixing the possible memory leak</h3>
<p>As described <a href="https://facebook.github.io/react/blog/2015/10/01/react-render-and-top-level-api.html">here</a> React will not automatically clean up the components which can lead to a memory leak. We can use the lifecycle hook $onDestroy() of our AngularJS component to unmount the React component.</p>
<pre style="background:#fdf6e3;color:#586e75;font-size:14px;"><span style="color:#859900;">import</span> Comment from <span style="color:#269186;"><span style="color:#c60000;">'</span>./presenter<span style="color:#c60000;">'</span></span>;

<span style="color:#073642;font-weight:bold;">const</span> render <span style="color:#859900;">=</span> <span style="color:#93a1a1;">(</span>element, props<span style="color:#93a1a1;">)</span> <span style="color:#859900;">=</span><span style="color:#859900;">&gt;</span> <span style="color:#268bd2;">{</span>
    ReactDOM.render<span style="color:#93a1a1;">(</span>
        <span style="color:#859900;">&lt;</span>Comment <span style="color:#268bd2;">{</span> ...props <span style="color:#268bd2;">}</span> /<span style="color:#859900;">&gt;</span>,
        element
    <span style="color:#93a1a1;">)</span>;
<span style="color:#268bd2;">}</span>

module.exports <span style="color:#859900;">=</span> angular.module<span style="color:#93a1a1;">(</span><span style="color:#269186;"><span style="color:#c60000;">'</span>ngReactExample.comment<span style="color:#c60000;">'</span></span>, <span style="color:#268bd2;">[</span>
<span style="color:#268bd2;">]</span><span style="color:#93a1a1;">)</span>.component<span style="color:#93a1a1;">(</span><span style="color:#269186;"><span style="color:#c60000;">'</span>comment<span style="color:#c60000;">'</span></span>, <span style="color:#268bd2;">{</span>
    bindings: <span style="color:#268bd2;">{</span>
        comment: <span style="color:#269186;"><span style="color:#c60000;">'</span>&lt;<span style="color:#c60000;">'</span></span>,
    <span style="color:#268bd2;">}</span>,
    <span style="color:#a57800;">controller</span>: <span style="color:#268bd2;">function</span>($element) <span style="color:#268bd2;">{</span>
        <span style="color:#073642;font-weight:bold;">const</span> <span style="color:#859900;">$</span>ctrl <span style="color:#859900;">=</span> <span style="color:#268bd2;">this</span>;
        <span style="color:#859900;">$</span>ctrl.<span style="color:#859900;">$</span>onChanges <span style="color:#859900;">=</span> <span style="color:#93a1a1;">(</span><span style="color:#93a1a1;">)</span> <span style="color:#859900;">=</span><span style="color:#859900;">&gt;</span> render<span style="color:#93a1a1;">(</span><span style="color:#859900;">$</span>element<span style="color:#268bd2;">[</span><span style="color:#269186;">0</span><span style="color:#268bd2;">]</span>, <span style="color:#268bd2;">{</span> comment: <span style="color:#859900;">$</span>ctrl.comment <span style="color:#268bd2;">}</span><span style="color:#93a1a1;">)</span>;
        <span style="color:#859900;">$</span>ctrl.<span style="color:#859900;">$</span>onDestroy <span style="color:#859900;">=</span> <span style="color:#93a1a1;">(</span><span style="color:#93a1a1;">)</span> <span style="color:#859900;">=</span><span style="color:#859900;">&gt;</span> ReactDOM.unmountComponentAtNode<span style="color:#93a1a1;">(</span><span style="color:#859900;">$</span>element<span style="color:#268bd2;">[</span><span style="color:#269186;">0</span><span style="color:#268bd2;">]</span><span style="color:#93a1a1;">)</span>;
    <span style="color:#268bd2;">}</span>
<span style="color:#268bd2;">}</span><span style="color:#93a1a1;">)</span>;
</pre>
<p>Voila! We’ve successfully passed data from AngularJS to a React component.</p>
<h3>Completing the bridge from AngularJS to React</h3>
<p>We’ve now found a way to wrap a React component with an AngularJS layer, so we can hook it up to the rest of our application.</p>
<p>This is a great starting point and a good proof of concept. Our current bridge is an interesting evolution of this first spark. In the next posts we will go more into technical details, also answering the question what we do, when the AngularJS component get&#8217;s destroyed, and more topics.</p>
<h2>To be continued…</h2>
<p>A sneak peak into the next chapter where we&#8217;ll have a closer look at:</p>
<ul>
<li>Using AngularJS services in React</li>
<li>Improving the AngularJS-React bridge to work with Hot Reloading and avoid unnecessary re-renderings</li>
<li>Rendering AngularJS components in React</li>
</ul>
<p>Stay tuned! <img src="https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f609.png" alt="😉" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p>Thanks for reading and if you have any questions or feedback, don&#8217;t be shy and reach out! <a href="https://twitter.com/sfroestl">@sfroestl</a> If you liked the post, please share!</p>
<h2>About the author</h2>
<p><img data-attachment-id="3360" data-permalink="https://tech.small-improvements.com/2017/01/25/how-to-migrate-an-angularjs-1-app-to-react/green3-1024x683/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2017/01/green3-1024x683.jpg?w=407&#038;h=272" data-orig-size="1024,683" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="green3-1024&#215;683" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2017/01/green3-1024x683.jpg?w=407&#038;h=272?w=300" data-large-file="https://smallimprovementstech.files.wordpress.com/2017/01/green3-1024x683.jpg?w=407&#038;h=272?w=700" class="  wp-image-3360 alignleft" src="https://smallimprovementstech.files.wordpress.com/2017/01/green3-1024x683.jpg?w=407&#038;h=272" alt="green3-1024x683" width="407" height="272" srcset="https://smallimprovementstech.files.wordpress.com/2017/01/green3-1024x683.jpg?w=407&amp;h=272 407w, https://smallimprovementstech.files.wordpress.com/2017/01/green3-1024x683.jpg?w=814&amp;h=544 814w, https://smallimprovementstech.files.wordpress.com/2017/01/green3-1024x683.jpg?w=150&amp;h=100 150w, https://smallimprovementstech.files.wordpress.com/2017/01/green3-1024x683.jpg?w=300&amp;h=200 300w, https://smallimprovementstech.files.wordpress.com/2017/01/green3-1024x683.jpg?w=768&amp;h=512 768w" sizes="(max-width: 407px) 100vw, 407px" /></p>
<h2><strong>Sebastian Fröstl</strong></h2>
<p>Team Lead. Software Engineer. Trainer. Coach. Speaker. Devoted to Personal Development. Organizer of <a title="Twitter profile for @angular_berlin" href="https://twitter.com/angular_berlin" target="_blank">@angular_berlin</a>.<br />
<a href="https://twitter.com/sfroestl">@sfroestl</a><br />
<a href="http://sebastianfroestl.de">sebastianfroestl.de</a></p>
<h2></h2>
<h2>Resources</h2>
<ul>
<li><a href="https://github.com/sfroestl/angular-react-migration">An example app to demonstrate an AngularJS 1.X React hybrid app</a></li>
<li><a href="https://docs.google.com/presentation/d/1AfgXqnwbxH5Qm3PJeepokO0Kh7h_dyhJZLT4dIIMTCE/edit?usp=sharing">Slides to the corresponding talk</a></li>
<li><a href="https://tech.small-improvements.com/2016/08/15/hack-it-ship-it/">https://tech.small-improvements.com/2016/08/15/hack-it-ship-it/</a></li>
<li><a href="https://tech.small-improvements.com/2016/10/18/onboarding-your-team-to-react-redux/">https://tech.small-improvements.com/2016/10/18/onboarding-your-team-to-react-redux/</a></li>
<li><a href="https://www.youtube.com/watch?v=eel3mV0alEc">How to design large AngularJS applications that scale</a></li>
<li><a href="https://www.youtube.com/watch?v=KdIretrDPhA">Refactoring To Components by Tero Parviainen</a></li>
</ul><br />  <a rel="nofollow" href="http://feeds.wordpress.com/1.0/gocomments/smallimprovementstech.wordpress.com/2971/"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/smallimprovementstech.wordpress.com/2971/" /></a> <img alt="" border="0" src="https://pixel.wp.com/b.gif?host=tech.small-improvements.com&#038;blog=44218990&#038;post=2971&#038;subd=smallimprovementstech&#038;ref=&#038;feed=1" width="1" height="1" />]]></content:encoded>
		
		<media:thumbnail url="https://smallimprovementstech.files.wordpress.com/2017/01/react-angular-illustration1.jpg" />
		<media:content url="http://smallimprovementstech.files.wordpress.com/2017/01/react-angular-illustration1.jpg" medium="image">
			<media:title type="html">Web</media:title>
		</media:content>

		<media:content url="http://2.gravatar.com/avatar/22bc5738bdbd25c6b779f523b43e951b?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">sfroestl</media:title>
		</media:content>

		<media:content url="http://smallimprovementstech.files.wordpress.com/2017/01/react-angular-illustration1.jpg" medium="image">
			<media:title type="html">Web</media:title>
		</media:content>

		<media:content url="http://smallimprovementstech.files.wordpress.com/2017/01/anguarconnenct.jpg" medium="image">
			<media:title type="html">anguarconnenct.jpg</media:title>
		</media:content>

		<media:content url="http://smallimprovementstech.files.wordpress.com/2017/01/screen-shot-2017-01-24-at-09-50-02.png" medium="image">
			<media:title type="html">Screen Shot 2017-01-24 at 09.50.02.png</media:title>
		</media:content>

		<media:content url="http://smallimprovementstech.files.wordpress.com/2017/01/screen-shot-2017-01-24-at-09-50-06.png" medium="image">
			<media:title type="html">Screen Shot 2017-01-24 at 09.50.06.png</media:title>
		</media:content>

		<media:content url="http://smallimprovementstech.files.wordpress.com/2017/01/screen-shot-2017-01-24-at-09-50-34.png" medium="image">
			<media:title type="html">screen-shot-2017-01-24-at-09-50-34</media:title>
		</media:content>

		<media:content url="http://smallimprovementstech.files.wordpress.com/2017/01/green3-1024x683.jpg" medium="image">
			<media:title type="html">green3-1024x683</media:title>
		</media:content>
	</item>
		<item>
		<title>Redesigning the Small Improvements emails</title>
		<link>https://tech.small-improvements.com/2017/01/12/redesigning-the-small-improvements-emails/</link>
		<pubDate>Thu, 12 Jan 2017 17:10:31 +0000</pubDate>
		<dc:creator><![CDATA[charissedetorres]]></dc:creator>
				<category><![CDATA[CSS]]></category>
		<category><![CDATA[Design]]></category>
		<category><![CDATA[UX]]></category>
		<category><![CDATA[email]]></category>

		<guid isPermaLink="false">http://tech.small-improvements.com/?p=2920</guid>
		<description><![CDATA[During Ship It Week, I took the opportunity to redesign our emails. The goal was to deliver a more modern and fluid layout in hopes of strengthening trust and creating a more pleasant user experience among our customers. Before and After Design According to research1, aesthetics play a big role on how people interact with things. And &#8230; <a href="https://tech.small-improvements.com/2017/01/12/redesigning-the-small-improvements-emails/" class="more-link">Continue reading <span class="screen-reader-text">Redesigning the Small Improvements&#160;emails</span></a><img alt="" border="0" src="https://pixel.wp.com/b.gif?host=tech.small-improvements.com&#038;blog=44218990&#038;post=2920&#038;subd=smallimprovementstech&#038;ref=&#038;feed=1" width="1" height="1" />]]></description>
				<content:encoded><![CDATA[<p>During Ship It Week, I took the opportunity to redesign our emails. The goal was to deliver a more modern and fluid layout in hopes of strengthening trust and creating a more pleasant user experience among our customers.</p>
<h1 id="EmailOverhaul:Blogpostdraft-BeforeandAfter">Before and After</h1>
<figure data-shortcode="caption" id="attachment_2927" style="width: 2365px" class="wp-caption alignnone"><img data-attachment-id="2927" data-permalink="https://tech.small-improvements.com/2017/01/12/redesigning-the-small-improvements-emails/email-blogpost-before-after-01/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2017/01/email-blogpost-before-after-01.jpg?w=700" data-orig-size="2365,1772" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="email-blogpost-before-after-01" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2017/01/email-blogpost-before-after-01.jpg?w=700?w=300" data-large-file="https://smallimprovementstech.files.wordpress.com/2017/01/email-blogpost-before-after-01.jpg?w=700?w=700" class="alignnone size-full wp-image-2927" src="https://smallimprovementstech.files.wordpress.com/2017/01/email-blogpost-before-after-01.jpg?w=700" alt="email-blogpost--before-after-01.jpg" srcset="https://smallimprovementstech.files.wordpress.com/2017/01/email-blogpost-before-after-01.jpg?w=700 700w, https://smallimprovementstech.files.wordpress.com/2017/01/email-blogpost-before-after-01.jpg?w=1400 1400w, https://smallimprovementstech.files.wordpress.com/2017/01/email-blogpost-before-after-01.jpg?w=150 150w, https://smallimprovementstech.files.wordpress.com/2017/01/email-blogpost-before-after-01.jpg?w=300 300w, https://smallimprovementstech.files.wordpress.com/2017/01/email-blogpost-before-after-01.jpg?w=768 768w, https://smallimprovementstech.files.wordpress.com/2017/01/email-blogpost-before-after-01.jpg?w=1024 1024w" sizes="(max-width: 700px) 100vw, 700px"   /><figcaption class="wp-caption-text">Before and after images of Small Improvements emails</figcaption></figure>
<h1 id="EmailOverhaul:Blogpostdraft-Design">Design</h1>
<p>According to research<sup>1</sup>, aesthetics play a big role on how people interact with things. And while the old email template is usable and performs the task well, it was outdated and not as attractive as the current state of the app itself.</p>
<blockquote>
<h2>&#8220;Attractive things make people feel good, which in turn makes them think more creatively&#8221;</h2>
<p style="text-align:right;"><em>Emotional Design</em> by Don Norman</p>
</blockquote>
<p>There are many factors that affect how a person feels when interacting with an email from Small Improvements. The key is to simplify it by making it easier for people to understand what the email is about. And since emotions change the way our mind operates – the happier we are, the better we can provide valuable feedback!</p>
<p>We want our users to feel excited when they receive an email feedback request, or whenever a feedback has been made available to them. In the end, it&#8217;s not just about how a part of the tool looks &#8211; it&#8217;s also a way to connect individuals to special events that may happen during their time in a company.</p>
<figure data-shortcode="caption" id="attachment_2931" style="width: 6014px" class="wp-caption alignnone"><img data-attachment-id="2931" data-permalink="https://tech.small-improvements.com/2017/01/12/redesigning-the-small-improvements-emails/email-blogpost-03/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2017/01/email-blogpost-03.jpg?w=700" data-orig-size="6014,7493" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="email-blogpost-03" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2017/01/email-blogpost-03.jpg?w=700?w=241" data-large-file="https://smallimprovementstech.files.wordpress.com/2017/01/email-blogpost-03.jpg?w=700?w=700" class="alignnone size-full wp-image-2931" src="https://smallimprovementstech.files.wordpress.com/2017/01/email-blogpost-03.jpg?w=700" alt="email-blogpost-03.jpg" srcset="https://smallimprovementstech.files.wordpress.com/2017/01/email-blogpost-03.jpg?w=700 700w, https://smallimprovementstech.files.wordpress.com/2017/01/email-blogpost-03.jpg?w=1400 1400w, https://smallimprovementstech.files.wordpress.com/2017/01/email-blogpost-03.jpg?w=120 120w, https://smallimprovementstech.files.wordpress.com/2017/01/email-blogpost-03.jpg?w=241 241w, https://smallimprovementstech.files.wordpress.com/2017/01/email-blogpost-03.jpg?w=768 768w, https://smallimprovementstech.files.wordpress.com/2017/01/email-blogpost-03.jpg?w=822 822w" sizes="(max-width: 700px) 100vw, 700px"   /><figcaption class="wp-caption-text">Different mockups of invitation email</figcaption></figure>

<a href='https://tech.small-improvements.com/2017/01/12/redesigning-the-small-improvements-emails/email-mocks-02-2/#main'><img width="139" height="150" src="https://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-021.png?w=139&#038;h=150" class="attachment-thumbnail size-thumbnail" alt="" srcset="https://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-021.png?w=139&#038;h=150 139w, https://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-021.png?w=278 278w" sizes="(max-width: 139px) 100vw, 139px" data-attachment-id="2937" data-permalink="https://tech.small-improvements.com/2017/01/12/redesigning-the-small-improvements-emails/email-mocks-02-2/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-021.png" data-orig-size="2493,2694" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="email-mocks-02" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-021.png?w=278" data-large-file="https://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-021.png?w=700" /></a>
<a href='https://tech.small-improvements.com/2017/01/12/redesigning-the-small-improvements-emails/email-mocks-03-2/#main'><img width="116" height="150" src="https://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-031.png?w=116&#038;h=150" class="attachment-thumbnail size-thumbnail" alt="" srcset="https://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-031.png?w=116&#038;h=150 116w, https://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-031.png?w=232 232w" sizes="(max-width: 116px) 100vw, 116px" data-attachment-id="2938" data-permalink="https://tech.small-improvements.com/2017/01/12/redesigning-the-small-improvements-emails/email-mocks-03-2/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-031.png" data-orig-size="2396,3086" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="email-mocks-03" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-031.png?w=233" data-large-file="https://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-031.png?w=700" /></a>
<a href='https://tech.small-improvements.com/2017/01/12/redesigning-the-small-improvements-emails/email-mocks-04/#main'><img width="85" height="150" src="https://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-04.png?w=85&#038;h=150" class="attachment-thumbnail size-thumbnail" alt="" srcset="https://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-04.png?w=85&#038;h=150 85w, https://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-04.png?w=170 170w" sizes="(max-width: 85px) 100vw, 85px" data-attachment-id="2939" data-permalink="https://tech.small-improvements.com/2017/01/12/redesigning-the-small-improvements-emails/email-mocks-04/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-04.png" data-orig-size="2169,3827" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="email-mocks-04" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-04.png?w=170" data-large-file="https://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-04.png?w=580" /></a>
<a href='https://tech.small-improvements.com/2017/01/12/redesigning-the-small-improvements-emails/email-mocks-05/#main'><img width="150" height="118" src="https://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-05.png?w=150&#038;h=118" class="attachment-thumbnail size-thumbnail" alt="" srcset="https://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-05.png?w=150&#038;h=118 150w, https://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-05.png?w=300 300w" sizes="(max-width: 150px) 100vw, 150px" data-attachment-id="2940" data-permalink="https://tech.small-improvements.com/2017/01/12/redesigning-the-small-improvements-emails/email-mocks-05/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-05.png" data-orig-size="2293,1806" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="email-mocks-05" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-05.png?w=300" data-large-file="https://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-05.png?w=700" /></a>
<a href='https://tech.small-improvements.com/2017/01/12/redesigning-the-small-improvements-emails/email-mocks-06/#main'><img width="150" height="148" src="https://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-06.png?w=150&#038;h=148" class="attachment-thumbnail size-thumbnail" alt="" srcset="https://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-06.png?w=150&#038;h=148 150w, https://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-06.png?w=300 300w" sizes="(max-width: 150px) 100vw, 150px" data-attachment-id="2941" data-permalink="https://tech.small-improvements.com/2017/01/12/redesigning-the-small-improvements-emails/email-mocks-06/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-06.png" data-orig-size="2184,2161" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="email-mocks-06" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-06.png?w=300" data-large-file="https://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-06.png?w=700" /></a>
<a href='https://tech.small-improvements.com/2017/01/12/redesigning-the-small-improvements-emails/email-mocks-07/#main'><img width="81" height="150" src="https://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-07.png?w=81&#038;h=150" class="attachment-thumbnail size-thumbnail" alt="" srcset="https://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-07.png?w=81&#038;h=150 81w, https://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-07.png?w=162 162w" sizes="(max-width: 81px) 100vw, 81px" data-attachment-id="2942" data-permalink="https://tech.small-improvements.com/2017/01/12/redesigning-the-small-improvements-emails/email-mocks-07/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-07.png" data-orig-size="2034,3745" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="email-mocks-07" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-07.png?w=163" data-large-file="https://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-07.png?w=556" /></a>

<h1></h1>
<h1 id="EmailOverhaul:Blogpostdraft-TechnicalDetails">Technical Details</h1>
<h3 id="EmailOverhaul:Blogpostdraft-Automaticinlinestyling">Automatic inline styling</h3>
<p>Emails are best structured in tables and styles work best when inlined. Inline styles can be a pain to maintain so I looked for a way to make it easier to update these templates in the future.</p>
<p>The great thing about working in the tech industry is that solutions to some problems are just a few clicks away <span class="inline-comment-marker valid">because you can almost be certain that people have gone to the same problem already</span>. We used a little library called <strong>gulp-inline-css </strong>that does exactly what <span class="inline-comment-marker">it&#8217;s</span> supposed to.</p>
<p>Before inliner:</p>
<pre class="p1">&lt;table class="table-reset"&gt;
  &lt;tr&gt;
<span class="Apple-converted-space">    </span>&lt;td align="left" class="logo-container padding-copy"&gt;
<span class="Apple-converted-space">      </span>&lt;!-- header --&gt;
<span class="Apple-converted-space">     </span>&lt;/td&gt;
<span class="Apple-converted-space">   </span>&lt;/tr&gt;
<span class="Apple-converted-space">   </span>&lt;tr&gt;
<span class="Apple-converted-space">     </span>&lt;td align="left" class="article-container padding-copy"&gt;
<span class="Apple-converted-space">       </span>&lt;!-- content --&gt;
<span class="Apple-converted-space">      </span>&lt;/td&gt;
<span class="Apple-converted-space">   </span>&lt;/tr&gt;
&lt;/table&gt;</pre>
<p>&nbsp;</p>
<p>After inliner:</p>
<pre class="p1">&lt;table class="table-reset" style="border: none; border-spacing: 0; padding: 0; width: 100%;"&gt;
  &lt;tr&gt;
<span class="Apple-converted-space">    </span>&lt;td align="left" class="logo-container padding-copy" style="color: #353535; font-family: 'Avenir Next', 'AvenirNext', Helvetica, Arial, sans-serif; padding-bottom: 20px;"&gt;
<span class="Apple-converted-space">      </span>&lt;!-- header --&gt; <span class="Apple-converted-space">       </span>
<span class="Apple-converted-space">    </span>&lt;/td&gt;
<span class="Apple-converted-space">  </span>&lt;/tr&gt;
<span class="Apple-converted-space">  </span>&lt;tr&gt;
<span class="Apple-converted-space">     </span>&lt;td align="left" class="article-container padding-copy" style="color: #353535; font-family: 'Avenir Next', 'AvenirNext', Helvetica, Arial, sans-serif; font-size: 16px; line-height: 25px; padding: 20px 0 0 0; text-align: left;"&gt;
<span class="Apple-converted-space">       </span>&lt;!-- content --&gt;
<span class="Apple-converted-space">     </span>&lt;/td&gt;
<span class="Apple-converted-space">  </span>&lt;/tr&gt;
&lt;/table&gt;</pre>
<p>All templates get a .responsive file extension so that the script knows which files to transform. It then outputs them with the correct filename that the accompanying java file needs in order to render correctly. Now everybody can make a CSS file, as they are accustomed to, and the script will automatically inline those styles!</p>
<h3 id="EmailOverhaul:Blogpostdraft-Testing">Testing</h3>
<p>During the entire process, I used a combination of a local mail server and online email testing platform. The benefit of the local mail server (which we&#8217;ve already set up) is that I get to see the email come in through my inbox when triggering events in the app, and can immediately see if something went wrong. Testing on the email testing platform, on the other hand, makes sure the templates are rendered correctly in as many email clients as possible.</p>
<figure style="width: 1420px" class="wp-caption alignnone"><img class="confluence-embedded-image" src="https://smallimprovements.jira.com/wiki/download/attachments/150110261/Screen%20Shot%202017-01-09%20at%2013.45.05.png?version=1&amp;modificationDate=1483965669987&amp;cacheVersion=1&amp;api=v2" width="1420" height="1102" /><figcaption class="wp-caption-text">Testing on different email clients</figcaption></figure>
<h1 id="EmailOverhaul:Blogpostdraft-NextSteps">Next Steps</h1>
<p>Changing the look and feel is just the first step <span class="inline-comment-marker">to</span> making <span class="inline-comment-marker">our</span> emails more pleasurable to interact with. The next step would be getting rid of the long links and replacing them with buttons and then revisiting emails that need a text overhaul!</p>
<h1 id="EmailOverhaul:Blogpostdraft-Conclusion">Conclusion</h1>
<p>Coding a template for emails is, without a doubt, very tricky. With hundreds of email clients and devices available within our grasp today, it&#8217;s no wonder that designing emails can quickly turn into a mess. But it can be done! The key is to make it simple and as straight to the point as possible. By combining it with rigorous testing, emails can be made almost as responsive as any website.</p>
<p><strong>Endnotes</strong></p>
<p><sup>1  </sup><a class="external-link" href="http://www.sigchi.org/chi95/proceedings/shortppr/mk_bdy.htm" rel="nofollow">Apparent Usability vs. Inherent Usability Experimental analysis on the determinants of the apparent usability</a> by Masaaki Kurosu and Kaori Kashimura;</p>
<p><a class="external-link" href="http://www.sigchi.org/chi97/proceedings/paper/nt.htm" rel="nofollow">Aesthetics and Apparent Usability: Empirically Assessing Cultural and Methodological Issues</a> by Noam Tractinsky</p><br />  <a rel="nofollow" href="http://feeds.wordpress.com/1.0/gocomments/smallimprovementstech.wordpress.com/2920/"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/smallimprovementstech.wordpress.com/2920/" /></a> <img alt="" border="0" src="https://pixel.wp.com/b.gif?host=tech.small-improvements.com&#038;blog=44218990&#038;post=2920&#038;subd=smallimprovementstech&#038;ref=&#038;feed=1" width="1" height="1" />]]></content:encoded>
		
		<media:thumbnail url="https://smallimprovementstech.files.wordpress.com/2017/01/email-blogpost-cover.png" />
		<media:content url="http://smallimprovementstech.files.wordpress.com/2017/01/email-blogpost-cover.png" medium="image">
			<media:title type="html">email-blogpost-cover</media:title>
		</media:content>

		<media:content url="http://2.gravatar.com/avatar/b94245d8cd5a45a45df3b5ba564835e5?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">charissedetorres</media:title>
		</media:content>

		<media:content url="http://smallimprovementstech.files.wordpress.com/2017/01/email-blogpost-before-after-01.jpg" medium="image">
			<media:title type="html">email-blogpost--before-after-01.jpg</media:title>
		</media:content>

		<media:content url="http://smallimprovementstech.files.wordpress.com/2017/01/email-blogpost-03.jpg" medium="image">
			<media:title type="html">email-blogpost-03.jpg</media:title>
		</media:content>

		<media:content url="http://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-021.png?w=139" medium="image" />

		<media:content url="http://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-031.png?w=116" medium="image" />

		<media:content url="http://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-04.png?w=85" medium="image" />

		<media:content url="http://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-05.png?w=150" medium="image" />

		<media:content url="http://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-06.png?w=150" medium="image" />

		<media:content url="http://smallimprovementstech.files.wordpress.com/2017/01/email-mocks-07.png?w=81" medium="image" />

		<media:content url="http://smallimprovements.jira.com/wiki/download/attachments/150110261/Screen%20Shot%202017-01-09%20at%2013.45.05.png?version=1&#038;modificationDate=1483965669987&#038;cacheVersion=1&#038;api=v2" medium="image" />
	</item>
		<item>
		<title>A Facelift for the Font Family</title>
		<link>https://tech.small-improvements.com/2016/12/14/a-facelift-for-the-font-family/</link>
		<pubDate>Wed, 14 Dec 2016 08:54:53 +0000</pubDate>
		<dc:creator><![CDATA[lucasarundell]]></dc:creator>
				<category><![CDATA[Design]]></category>
		<category><![CDATA[Avenir]]></category>
		<category><![CDATA[css]]></category>
		<category><![CDATA[font]]></category>
		<category><![CDATA[html]]></category>
		<category><![CDATA[overhaul]]></category>
		<category><![CDATA[UI]]></category>

		<guid isPermaLink="false">http://tech.small-improvements.com/?p=2845</guid>
		<description><![CDATA[Today we&#8217;re excited to announce a new makeover for the Small Improvements application; a new font family! Please welcome &#8220;Avenir Next&#8221;! This is all part of our mission to create a more enjoyable, engaging and enticing experience for  Small Improvements users. The Design Team @ Small Improvements has had a big year; going responsive, updating colours, icons &#8230; <a href="https://tech.small-improvements.com/2016/12/14/a-facelift-for-the-font-family/" class="more-link">Continue reading <span class="screen-reader-text">A Facelift for the Font&#160;Family</span></a><img alt="" border="0" src="https://pixel.wp.com/b.gif?host=tech.small-improvements.com&#038;blog=44218990&#038;post=2845&#038;subd=smallimprovementstech&#038;ref=&#038;feed=1" width="1" height="1" />]]></description>
				<content:encoded><![CDATA[<p>Today we&#8217;re excited to announce a new makeover for the Small Improvements application; a new font family! Please welcome &#8220;Avenir Next&#8221;!</p>
<p><img data-attachment-id="2877" data-permalink="https://tech.small-improvements.com/2016/12/14/a-facelift-for-the-font-family/attachment/2939526/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2016/12/2939526-e1481705613606.jpg?w=700" data-orig-size="301,158" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;1&quot;}" data-image-title="2939526" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2016/12/2939526-e1481705613606.jpg?w=700?w=300" data-large-file="https://smallimprovementstech.files.wordpress.com/2016/12/2939526-e1481705613606.jpg?w=700?w=301" class="aligncenter wp-image-2877 size-full" src="https://smallimprovementstech.files.wordpress.com/2016/12/2939526-e1481705613606.jpg?w=700" alt="Avenir Next - our new font" srcset="https://smallimprovementstech.files.wordpress.com/2016/12/2939526-e1481705613606.jpg 301w, https://smallimprovementstech.files.wordpress.com/2016/12/2939526-e1481705613606.jpg?w=150 150w" sizes="(max-width: 301px) 100vw, 301px"   /></p>
<figure data-shortcode="caption" id="attachment_2901" style="width: 310px" class="wp-caption alignright"><img data-attachment-id="2901" data-permalink="https://tech.small-improvements.com/2016/12/14/a-facelift-for-the-font-family/newfont1/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2016/12/newfont11.png" data-orig-size="728,678" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="newfont1" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2016/12/newfont11.png?w=300&#038;h=279" data-large-file="https://smallimprovementstech.files.wordpress.com/2016/12/newfont11.png?w=700" class=" size-medium wp-image-2901 alignright" src="https://smallimprovementstech.files.wordpress.com/2016/12/newfont11.png?w=300&#038;h=279" alt="newfont1" width="300" height="279" srcset="https://smallimprovementstech.files.wordpress.com/2016/12/newfont11.png?w=300&amp;h=279 300w, https://smallimprovementstech.files.wordpress.com/2016/12/newfont11.png?w=600&amp;h=558 600w, https://smallimprovementstech.files.wordpress.com/2016/12/newfont11.png?w=150&amp;h=140 150w" sizes="(max-width: 300px) 100vw, 300px" /><figcaption class="wp-caption-text">Sample Objective within Small Improvements</figcaption></figure>
<p>This is all part of our mission to create a more enjoyable, engaging and enticing experience for  Small Improvements users. The Design Team @ Small Improvements has had a big year; <a class="external-link" href="https://blog.small-improvements.com/2016/05/04/a-new-small-improvements-experience-is-coming-on-may-28/" rel="nofollow">going responsive</a>, <a class="external-link" href="https://blog.small-improvements.com/2016/08/08/new-objective-icons-badges-and-some-refreshing-colours/" rel="nofollow">updating colours, icons and badges</a>, and now for the final Christmas treat, we&#8217;ve introduced the smart, the elegant, the distinguished style of Avenir Next.</p>
<h2>Watching our Weight</h2>
<p>Part of the new font release has also included making better use of font weights (eg. Regular vs. <strong>Bold</strong>) &#8211; giving you a clearer view of what&#8217;s important on the page, and making it easier to scan the page with your eyes to find the right things.</p>
<h2>Keeping it Uniform</h2>
<p>In the past, the default SI font varied across devices. That&#8217;s because we used &#8216;system fonts&#8217; only, so some users had Helvetica, some Arial, some had which ever default &#8216;sans-serif&#8217; font their device had.</p>
<p>Now all users will share the same experience across all devices.</p>
<figure data-shortcode="caption" id="attachment_2908" style="width: 1470px" class="wp-caption alignnone"><img data-attachment-id="2908" data-permalink="https://tech.small-improvements.com/2016/12/14/a-facelift-for-the-font-family/screen-shot-2016-12-12-at-15-55-35/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2016/12/screen-shot-2016-12-12-at-15-55-35.png?w=700" data-orig-size="1470,658" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="screen-shot-2016-12-12-at-15-55-35" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2016/12/screen-shot-2016-12-12-at-15-55-35.png?w=700?w=300" data-large-file="https://smallimprovementstech.files.wordpress.com/2016/12/screen-shot-2016-12-12-at-15-55-35.png?w=700?w=700" class="alignnone size-full wp-image-2908" src="https://smallimprovementstech.files.wordpress.com/2016/12/screen-shot-2016-12-12-at-15-55-35.png?w=700" alt="screen-shot-2016-12-12-at-15-55-35" srcset="https://smallimprovementstech.files.wordpress.com/2016/12/screen-shot-2016-12-12-at-15-55-35.png?w=700 700w, https://smallimprovementstech.files.wordpress.com/2016/12/screen-shot-2016-12-12-at-15-55-35.png?w=1400 1400w, https://smallimprovementstech.files.wordpress.com/2016/12/screen-shot-2016-12-12-at-15-55-35.png?w=150 150w, https://smallimprovementstech.files.wordpress.com/2016/12/screen-shot-2016-12-12-at-15-55-35.png?w=300 300w, https://smallimprovementstech.files.wordpress.com/2016/12/screen-shot-2016-12-12-at-15-55-35.png?w=768 768w, https://smallimprovementstech.files.wordpress.com/2016/12/screen-shot-2016-12-12-at-15-55-35.png?w=1024 1024w" sizes="(max-width: 700px) 100vw, 700px"   /><figcaption class="wp-caption-text">Sample Message within Small Improvements &#8211; with new typography</figcaption></figure>
<p>&nbsp;</p>
<p>&nbsp;</p><br />  <a rel="nofollow" href="http://feeds.wordpress.com/1.0/gocomments/smallimprovementstech.wordpress.com/2845/"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/smallimprovementstech.wordpress.com/2845/" /></a> <img alt="" border="0" src="https://pixel.wp.com/b.gif?host=tech.small-improvements.com&#038;blog=44218990&#038;post=2845&#038;subd=smallimprovementstech&#038;ref=&#038;feed=1" width="1" height="1" />]]></content:encoded>
		
		<media:content url="http://2.gravatar.com/avatar/ef5d3188aecbfdc668663e43da5edfb6?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">lucasarundell</media:title>
		</media:content>

		<media:content url="http://smallimprovementstech.files.wordpress.com/2016/12/2939526-e1481705613606.jpg" medium="image">
			<media:title type="html">Avenir Next - our new font</media:title>
		</media:content>

		<media:content url="http://smallimprovementstech.files.wordpress.com/2016/12/newfont11.png?w=300" medium="image">
			<media:title type="html">newfont1</media:title>
		</media:content>

		<media:content url="http://smallimprovementstech.files.wordpress.com/2016/12/screen-shot-2016-12-12-at-15-55-35.png" medium="image">
			<media:title type="html">screen-shot-2016-12-12-at-15-55-35</media:title>
		</media:content>
	</item>
		<item>
		<title>Looking Back at GOTO 2016</title>
		<link>https://tech.small-improvements.com/2016/12/05/looking-back-at-goto-2016/</link>
		<pubDate>Mon, 05 Dec 2016 12:02:02 +0000</pubDate>
		<dc:creator><![CDATA[Peter Crona]]></dc:creator>
				<category><![CDATA[Conferences]]></category>

		<guid isPermaLink="false">http://tech.small-improvements.com/?p=2819</guid>
		<description><![CDATA[By Peter Crona and Michael Ruhwedel First of all, it was an amazing conference as always. None of us presented this year, but look for us in the future. Many of us at Small Improvements tend to go to more specific conferences, such as React Europe, DockerCon or JSUnconf. GOTO is more of a generic software engineering &#8230; <a href="https://tech.small-improvements.com/2016/12/05/looking-back-at-goto-2016/" class="more-link">Continue reading <span class="screen-reader-text">Looking Back at GOTO&#160;2016</span></a><img alt="" border="0" src="https://pixel.wp.com/b.gif?host=tech.small-improvements.com&#038;blog=44218990&#038;post=2819&#038;subd=smallimprovementstech&#038;ref=&#038;feed=1" width="1" height="1" />]]></description>
				<content:encoded><![CDATA[<p><strong>By Peter Crona and Michael Ruhwedel</strong></p>
<p><img data-attachment-id="2841" data-permalink="https://tech.small-improvements.com/2016/12/05/looking-back-at-goto-2016/goto/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2016/12/goto.png?w=700" data-orig-size="770,267" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="goto" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2016/12/goto.png?w=700?w=300" data-large-file="https://smallimprovementstech.files.wordpress.com/2016/12/goto.png?w=700?w=700" class="alignnone size-full wp-image-2841" src="https://smallimprovementstech.files.wordpress.com/2016/12/goto.png?w=700" alt="goto" srcset="https://smallimprovementstech.files.wordpress.com/2016/12/goto.png?w=700 700w, https://smallimprovementstech.files.wordpress.com/2016/12/goto.png?w=150 150w, https://smallimprovementstech.files.wordpress.com/2016/12/goto.png?w=300 300w, https://smallimprovementstech.files.wordpress.com/2016/12/goto.png?w=768 768w, https://smallimprovementstech.files.wordpress.com/2016/12/goto.png 770w" sizes="(max-width: 700px) 100vw, 700px"   /></p>
<p>First of all, it was an amazing conference as always. None of us presented this year, <span class="inline-comment-marker valid">but look for us in the future</span>. Many of us at Small Improvements tend to go to more specific conferences, such as <a class="external-link" href="https://tech.small-improvements.com/2016/06/10/react-europe-2016/" rel="nofollow">React Europe</a>, DockerCon or <a class="external-link" href="https://tech.small-improvements.com/2016/04/29/jsunconf-in-hamburg/" rel="nofollow"><span class="inline-comment-marker valid">JSUnconf</span></a>. GOTO is more of a generic software engineering conference, focusing on issues such as architecture, security and new trends in the field. It doesn’t go as deep into the topics as the specialized conferences, but it serves well to give an overview and an introduction to interesting topics. Some of the most interesting and most popular topics were, as expected, microservices, data science, security and ethics. Let’s start with microservices.</p>
<h1 id="LookingBackatGOTO2016-MicroservicesaretheFuture">Microservices are the Future</h1>
<p>Something interesting about the future is that it is also always in the present, just initially hiding a bit in the corners. A clear message from Mary Poppendieck was that <a class="external-link" href="https://gotocon.com/dl/goto-berlin-2016/slides/MaryPoppendieck_MorningKeynoteTheFutureOfSoftwareEngineering.pdf" rel="nofollow">microservices are the future</a>. Regardless of whether we want it or not, we need to learn it and will eventually use it.</p>
<p>Susanne Kaiser from Just Software talked about their ongoing journey from a <a class="external-link" href="https://gotocon.com/dl/goto-berlin-2016/slides/SusanneKaiser_TheMicroservicesJourneyFromAStartupPerspective.pdf" rel="nofollow">monolith to microservices</a>. She warned us from doing too much at once, but concluded that going from a monolith to microservices was worth it in the end. She also told us about the importance to not underestimate the effort required to do so. Later on Ilya Dmitrichenko walked us through <a class="external-link" href="https://github.com/microservices-demo/microservices-demo" rel="nofollow">Socks Shop</a>, a demo application to show how an application built with microservices can look. He also showed us how a microservice-based application is deployed.</p>
<p>I urge you to read up on microservices if you haven’t. It is truly fascinating how convenient the configuration is nowadays, and if you’ve been around for awhile, you will find it interesting to compare with how we did it in the good old days. Have a look at <a class="external-link" href="https://github.com/microservices-demo/microservices-demo/blob/master/deploy/docker-compose/docker-compose.yml" rel="nofollow">this configuration</a> for example, lovely, isn’t it? Let’s move on to another topic, which I have a very strong interest for, namely data science.</p>
<h1 id="LookingBackatGOTO2016-SeeingintotheFuture">Seeing into the Future</h1>
<p>It is truly fascinating how quickly data science has become popular and advanced. One of the first talks I went to was “<a class="external-link" href="https://gotocon.com/dl/goto-berlin-2016/slides/NikhilPodduturi_AppliedDataScienceAndEngineeringForLocalWeatherForecasts.pdf" rel="nofollow">Applied data science and engineering for local weather forecasts</a>” by Nikhil Podduturi from Meteogroup. He took us through how they started using machine learning, running everything on their own laptops and then moving into the cloud. He showed us a bit of their architecture that process more than a terabyte daily. I enjoyed his talk very much and had a chat afterwards, in which he pointed out that, when getting started with data science, it is sensible to start with the basics, learning/repeating the mathematics and then move on to hot techniques such as deep learning. This will make it easier to develop an intuition for which technique to use when and how to find the best parameters. He recommended using Python since it has a very mature ecosystem for machine learning.</p>
<p>Robert Kubis from Google tutored us in <a class="external-link" href="https://gotocon.com/dl/goto-berlin-2016/slides/RobertKubis_TensorflowAndDeepLearningWithoutAPhD.pdf" rel="nofollow">Tensorflow</a>, by working the Hello World of machine learning, namely classification of handwritten digits. He pushed the success rate of a neural network, up to an impressive 98%, while touching the basics of the Python API. This was a very interesting and hand-on talk, showing you how to use Tensorflow and giving you an introduction to deep learning.</p>
<p>How to find insights without using machine learning, was the topic of Michael Hunger from Neo Technology talk. He demonstrated how data can be <a class="external-link" href="https://gotocon.com/dl/goto-berlin-2016/slides/MichaelHunger_EnablingThePanamaPapersInvestigationsWithOpenSourceTools.pdf" rel="nofollow">modelled and queried using a graph</a>. His talk focused on how Neo4J was used by journalists to analyze the panama papers.</p>
<p>Even your code repository is a datasource in itself that can be mined. This concept was <a class="external-link" href="https://gotocon.com/dl/goto-berlin-2016/slides/ElmarJuergens_MiningRepositoryDataToDebugSoftwareDevelopmentTeams.pdf" rel="nofollow">presented</a> by Dr. Elmar Juergens. By coloring new additions of code and test-coverages of functional tests, he clearly demonstrated that a dev- and a test-department at one of his clients had a serious communication problem: There was little overlap in what was tested and what was newly implemented.</p>
<p>The last two talks about data science were focusing a bit more on possibilities, philosophy and ethics. “Deep Stupidity: What Neural Networks Can and Cannot do …” by Prof J. Mark Bishop discussed about whether we can build general intelligence or not. “<a class="external-link" href="http://www.slideshare.net/cczona/consequences-of-an-insightful-algorithm" rel="nofollow">Consequences of an Insightful Algorithm</a>” by Carina C. Zona focused on the importance of thinking through the ethical aspects when developing algorithms and using them. We are giving a lot of power to algorithms, and algorithms tend to reinforce prejudices and do not necessarily care about what is right, but are still used to make decisions that affect people’s lives. Let’s now have a look at the security talks.</p>
<h1 id="LookingBackatGOTO2016-ASecureInternet">A Secure Internet</h1>
<p>When you learn a new concept, such as microservices, it is important to read up on security. It is easy to make mistakes that introduce vulnerabilities when you are new to technologies. Phil Winder talked about <a class="external-link" href="https://gotocon.com/dl/goto-berlin-2016/slides/PhilWinder_SecureMySocksExploringMicroserviceSecurityInAnOpenSourceSockShop.pdf" rel="nofollow">how to make your microservices secure</a>. He was very practical and showed us common mistakes people do, such as running as root in containers and not setting up a sensible network policy. Dr. Jutta Steiner <a class="external-link" href="https://gotocon.com/dl/goto-berlin-2016/slides/JuttaSteiner_FixingTheWebWithTheGlobalBlockchainTrustMachine.pdf" rel="nofollow">introduced us to Blockchain technology</a>. She pointed out how we can use techniques from safety critical systems development, such as <a class="external-link" href="https://en.wikipedia.org/wiki/N-version_programming" rel="nofollow">N-version programming,</a> to securely implement it and minimizing the risk of bugs. The talk was unfortunately not going into implementation details of blockchain technology itself, but she made it clear that the technology can be used for much more than just a currency such as Bitcoin. Finally, let&#8217;s have a look at the ethics focused talks.</p>
<h1 id="LookingBackatGOTO2016-EthicsinTechnology">Ethics in Technology</h1>
<p>The great thing about goto is, that it&#8217;s not got the latest technology topics covered, but also how to better get along with your fellow human beings.</p>
<p>Jamie Dobson encouraged us to think beyond capitalism in his inspiring &#8220;<a class="external-link" href="https://gotocon.com/dl/goto-berlin-2016/slides/JamieDobson_Postcapitalism.pdf" rel="nofollow">Postcapitalism</a>&#8221; talk. It&#8217;s possible that the  power of 3D printing small and <a class="external-link" href="https://en.wikipedia.org/wiki/Construction_3D_printing" rel="nofollow">large</a> can bring back the capital and onshore work in developed countries again.</p>
<p>Beginning with a short meditation <a class="external-link" href="http://gotocon.com/berlin-2016/speaker/Jeffery+Hackert" rel="nofollow">Jeffery Hackert</a> build a compelling argument for giving our full presence. With a full awareness of ourselves and our workplace come better informed observations, decisions and implementations. After all if you&#8217;re ever involved in a <a class="external-link" href="https://en.wikipedia.org/wiki/Trolley_problem" rel="nofollow">trolley problem</a>, it would be really unfortunate if you&#8217;d be focused on your cellphone and not the lever.</p>
<p>If you&#8217;ve been exhausted by office politics Kate Gray and Chris Young can help you. Their great talk &#8220;<a class="external-link" href="https://gotocon.com/dl/goto-berlin-2016/slides/ChrisYoung_and_KateGray_HowToWinHeartsAndMindsTheLessonsLearnedFromElectoralPolitics.pdf" rel="nofollow">How to Win Hearts and Minds</a>&#8221; is about how the finesse of real world politics were used to push a blocked IT project to success.</p>
<p>Talks ranging from microservices to ethics shows you the great variety offered at GOTO, the conference really has a lot to offer.</p>
<h1 id="LookingBackatGOTO2016-SomethingforEveryone">Something for Everyone</h1>
<p>Let’s end with some words about the conference itself. GOTO has five different tracks and the mix is very good, covering important and trending topics such as architecture (in particular microservices), security, data science and much more. In addition to this you find plenty of interesting people there to share ideas and pain points with. My only disappointment was that there was not a single talk about functional programming. But hey, you can’t fit everything into one conference.</p><br />  <a rel="nofollow" href="http://feeds.wordpress.com/1.0/gocomments/smallimprovementstech.wordpress.com/2819/"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/smallimprovementstech.wordpress.com/2819/" /></a> <img alt="" border="0" src="https://pixel.wp.com/b.gif?host=tech.small-improvements.com&#038;blog=44218990&#038;post=2819&#038;subd=smallimprovementstech&#038;ref=&#038;feed=1" width="1" height="1" />]]></content:encoded>
		
		<media:content url="http://0.gravatar.com/avatar/cdfa4c0759926eb266588b213e3acc59?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">petercrona</media:title>
		</media:content>

		<media:content url="http://smallimprovementstech.files.wordpress.com/2016/12/goto.png" medium="image">
			<media:title type="html">goto</media:title>
		</media:content>
	</item>
		<item>
		<title>Using Haskell to Find Unused Spring MVC Code</title>
		<link>https://tech.small-improvements.com/2016/11/01/using-haskell-to-find-unused-spring-mvc-code/</link>
		<pubDate>Tue, 01 Nov 2016 16:42:14 +0000</pubDate>
		<dc:creator><![CDATA[Peter Crona]]></dc:creator>
				<category><![CDATA[Haskell]]></category>
		<category><![CDATA[Programming]]></category>

		<guid isPermaLink="false">http://tech.small-improvements.com/?p=2678</guid>
		<description><![CDATA[Like a lot of people at Small Improvements I’m fascinated by functional programming. For a while I’ve been thinking about cleaning up a little in our codebase, mainly the backend which is written in Java. I have known for ages that Haskell is really good with abstract syntax trees (ASTs) and was playing with the thought of creating a Haskell tool that would help me with this.<img alt="" border="0" src="https://pixel.wp.com/b.gif?host=tech.small-improvements.com&#038;blog=44218990&#038;post=2678&#038;subd=smallimprovementstech&#038;ref=&#038;feed=1" width="1" height="1" />]]></description>
				<content:encoded><![CDATA[<p><img data-attachment-id="2816" data-permalink="https://tech.small-improvements.com/2016/11/01/using-haskell-to-find-unused-spring-mvc-code/screen-shot-2016-12-02-at-14-43-09/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2016/11/screen-shot-2016-12-02-at-14-43-09.png?w=338&#038;h=188" data-orig-size="554,308" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="screen-shot-2016-12-02-at-14-43-09" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2016/11/screen-shot-2016-12-02-at-14-43-09.png?w=338&#038;h=188?w=300" data-large-file="https://smallimprovementstech.files.wordpress.com/2016/11/screen-shot-2016-12-02-at-14-43-09.png?w=338&#038;h=188?w=554" class="  wp-image-2816 aligncenter" src="https://smallimprovementstech.files.wordpress.com/2016/11/screen-shot-2016-12-02-at-14-43-09.png?w=338&#038;h=188" alt="Screen Shot 2016-12-02 at 14.43.09.png" width="338" height="188" srcset="https://smallimprovementstech.files.wordpress.com/2016/11/screen-shot-2016-12-02-at-14-43-09.png?w=338&amp;h=188 338w, https://smallimprovementstech.files.wordpress.com/2016/11/screen-shot-2016-12-02-at-14-43-09.png?w=150&amp;h=83 150w, https://smallimprovementstech.files.wordpress.com/2016/11/screen-shot-2016-12-02-at-14-43-09.png?w=300&amp;h=167 300w, https://smallimprovementstech.files.wordpress.com/2016/11/screen-shot-2016-12-02-at-14-43-09.png 554w" sizes="(max-width: 338px) 100vw, 338px" /></p>
<p>Not into reading text? <a href="http://github.com/SmallImprovements/spring-clean">Click here for the code</a>.</p>
<p><span style="font-weight:400;">Like a lot of people at Small Improvements I’m fascinated by <a href="https://en.wikipedia.org/wiki/Functional_programming">functional programming</a>. After coming back from our company trip in San Francisco I had trouble beating jet lag due to spending the evenings reading about </span><a href="http://book.realworldhaskell.org/read/monad-transformers.html"><span style="font-weight:400;">monad transformers</span></a><span style="font-weight:400;">, I’m not kidding, it actually kept me awake. </span></p>
<p><span style="font-weight:400;">For a while I’ve been thinking about cleaning up a little in our codebase, mainly the backend which is written in Java. I have known for ages that Haskell is really good with </span><a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree"><span style="font-weight:400;">abstract syntax trees</span></a><span style="font-weight:400;"> (ASTs) and was playing with the thought of creating a Haskell tool that would help me with this. However, to not completely violate the “do not reinvent the wheel” rule I first had a quick look at what’s already out there.</span></p>
<h1><span style="font-weight:400;">Finding An Existing Tool or Building My Own</span></h1>
<p><span style="font-weight:400;">Most of the developers at work use IDEA (for editing Java) which has built in tools for finding unused code and do all different kinds of code analysis. I tried using it for finding unused code a couple of times with different settings but didn’t manage to get acceptable results. The number of false positives was way too high for it to be useful, in addition to this it was incredibly slow. I also tried </span><a href="http://findbugs.sourceforge.net/"><span style="font-weight:400;">Findbugs</span></a><span style="font-weight:400;"> without satisfying results. </span></p>
<p><span style="font-weight:400;">I’m sure it’s possible to configure some existing software, but rather than spending more time finding a COTS-tool I figured I might just code it myself. I was thinking that if it’s specific to our project it shouldn’t be so hard. I quickly realized regular expressions wouldn’t be enough or would be very tricky to use and limit my flexibility. This left me with the choice of writing a custom parser or building a proper AST and work with that. </span></p>
<p><span style="font-weight:400;">I have bad experience of working with ASTs in Java, but Haskell is another story, traversing a tree is a piece of cake. I had a quick look at Hackage and noticed that someone already has written a </span><a href="https://hackage.haskell.org/package/language-java"><span style="font-weight:400;">parser for Java</span></a><span style="font-weight:400;"> in Haskell, so it was settled, I was starting Small Improvements&#8217; first, albeit small, Haskell project. Finally I got to use Haskell at work!</span></p>
<h1><span style="font-weight:400;">My Solution For Finding Unused Code</span></h1>
<p><span style="font-weight:400;">It is actually quite simple to find unused Java code. Let’s have a look at my solution. In essence I&#8217;m reading all the .java-files in a folder, building an AST using </span><a href="https://hackage.haskell.org/package/language-java"><span style="font-weight:400;">language-java</span></a><span style="font-weight:400;"> and then traversing the AST to collect information that can later be used to decide if a file is used or not. </span></p>
<p><span style="font-weight:400;">The main information I&#8217;m looking for is whether any other file imports a file. However, since Java does not require an import statement if the dependency is within the same package I also look for other things such as method calls. After this I’m using the information to actually find unused files.</span></p>
<p><span style="font-weight:400;">To find unused files I&#8217;m building a graph. Nodes are files and an edge means that a file is used by another file. So the challenge here is to actually add an edge every time a file is used. An obvious thing to do is to add an edge for every import statement. </span></p>
<p><span style="font-weight:400;">To improve the result further I&#8217;m adding edges for references within a package, eg. used classes or methods within the package. However, this is not enough since Spring MVC has a powerful dependency injection system. It supports injecting dependencies and still only relying on interfaces. You can get all classes of a type (interface) injected or one specific instance but still only depending on its interface. </span></p>
<p><span style="font-weight:400;">When harvesting the AST I also collected autowired classes and superclasses. Using this I filtered out files that are autowired, either directly or via an interface. The result is not 100% perfect, but with a small blacklist of classes and some other trivial filtering I managed to make it good enough for it to be very useful. Everything I get from the AST is modeled using the following data structure:</span></p>
<pre style="font-size:12px;background:#fff;color:#3b3b3b;">data <span style="color:#0053ff;font-weight:bold;">Result</span> <span style="color:#069;font-weight:bold;">=</span> <span style="color:#0053ff;font-weight:bold;">Result</span> { fileName :: <span style="color:#0053ff;font-weight:bold;">String</span>
                     , imports :: [<span style="color:#0053ff;font-weight:bold;">String</span>]
                     , references :: [<span style="color:#0053ff;font-weight:bold;">String</span>]
                     , topLevelAnnotations :: [<span style="color:#0053ff;font-weight:bold;">String</span>]
                     , methodAnnotations :: [<span style="color:#0053ff;font-weight:bold;">String</span>]
                     , implements :: [<span style="color:#0053ff;font-weight:bold;">String</span>]
                     , autowired :: [<span style="color:#0053ff;font-weight:bold;">Autowiring</span>]
                     } <span style="color:#21439c;">deriving</span> (<span style="color:#0053ff;font-weight:bold;">Show</span>)
</pre>
<p><span style="font-weight:400;">Have a look at the code and try it on your own Spring MVC project. Feel free to comment here if you need help or have suggestions of improvements. Let’s now compare coding Haskell with Java / JavaScript that we normally do at Small Improvements.</span></p>
<h1><span style="font-weight:400;">Reflection of Development With Haskell</span></h1>
<p><span style="font-weight:400;">I’m a big fan of Haskell and have been for ages. One of the first things I noticed is the wonderful support you get from the compiler. When the compiler blesses your code it is very likely to just work. Once you have established that your code works, that it behaves correctly, then it is really difficult to accidentally change its behavior when refactoring. You might break it, as in making it not compile, but once it compiles again it is very likely to behave like before. </span></p>
<p><span style="font-weight:400;">Composition is just beautiful. It strongly promotes breaking your program into trivial pieces and then glueing them together. Types are excellent documentation, the type signature together with the function name often makes it easy to guess exactly what the function does. It’s easy to write relatively clean code in Haskell. I think that the pureness and composition of small functions almost automatically makes it happen. </span></p>
<p><span style="font-weight:400;">Actually, in Haskell it is a bit difficult to write functions that are hundreds of lines of code doing many different things. In Java or JavaScript that is what many people begin doing, and something they only unlearn as they become more skilled. I think that it is possible to produce nice code in all languages, but Haskell does help you quite a lot to keep your code nice, not to mention <a href="https://hackage.haskell.org/package/hlint">hlint</a>. Haskell does not guarantee that you produce good code though, let’s look at some of my learnings from this project.</span></p>
<h1><span style="font-weight:400;">Learnings From This Project</span></h1>
<p><span style="font-weight:400;">One thing I learned is that <a href="https://wiki.haskell.org/Type_synonym">type aliases</a> are very useful, you should use them whenever it makes your code more readable. Comments are in general not needed if the type signature and function name is good. </span></p>
<p><span style="font-weight:400;">Naming your code increases readability, for example extracting out small pieces of code to the <a href="https://wiki.haskell.org/Let_vs._Where#Advantages_of_where">where clause</a> of a function or simply making them top-level functions in the module. Putting too many functions that are relatively complex in the where clause is a bad idea, because you lose the explicit <a href="https://wiki.haskell.org/Type_signature">type signature</a> (you should always specify it for top-level functions) which makes it difficult to directly understand when they can be used and how they can be combined. A small example of a nice usage of the where clause is:</span></p>
<pre style="font-size:12px;background:#fff;color:#3b3b3b;"><span style="color:#21439c;">transformToEdges</span> <span style="color:#069;font-weight:bold;">::</span> <span style="color:#ff5600;">Result</span> <span style="color:#069;font-weight:bold;">-&gt;</span> <span style="color:#ff5600;">Node</span>
transformToEdges r <span style="color:#069;font-weight:bold;">=</span> (r, fileName r, outgoingEdges)
  <span style="color:#069;font-weight:bold;">where</span> outgoingEdges <span style="color:#069;font-weight:bold;">=</span> references r <span style="color:#069;font-weight:bold;">++</span> <span style="color:#069;font-weight:bold;">import</span>s r ++ implements r
</pre>
<p>Note the increased readability in the top level expression. The where-clause is used to hide the messy details of what outgoing edges are behind a simple name. By using where it is often possible to make the top level expression very easy to read.</p>
<p><span style="font-weight:400;"><a href="https://en.wikipedia.org/wiki/Currying">Curried functions</a> are just awesome, they make it possible to compose almost any function. A good way to design them is to think of functions as being configured and getting what they operate on as the final argument. </span></p>
<p><a href="http://www.cse.chalmers.se/~rjmh/Papers/whyfp.pdf"><span style="font-weight:400;">Lazy evaluation is powerful</span></a><span style="font-weight:400;">, I still need to practice how to leverage it fully, but it is important to be aware of it. For example in my case I ran into problem when reading all files lazily. This caused my program to have too many open file handles. It was easily solved though, by hacking a bit to force the complete file to be read directly:</span></p>
<pre style="font-size:12px;background:#fff;color:#3b3b3b;"><span style="color:#21439c;">readFileStrict</span> <span style="color:#069;font-weight:bold;">::</span> <span style="color:#a535ae;">FilePath</span> <span style="color:#069;font-weight:bold;">-&gt;</span> <span style="color:#a535ae;">IO</span> <span style="color:#a535ae;">String</span>
readFileStrict path <span style="color:#069;font-weight:bold;">=</span> <span style="color:#069;font-weight:bold;">do</span>
  file <span style="color:#069;font-weight:bold;">&lt;-</span> <span style="color:#45ae34;font-weight:bold;">readFile</span> path
  _ <span style="color:#069;font-weight:bold;">&lt;-</span> evaluate <span style="color:#069;font-weight:bold;">$</span> <span style="color:#45ae34;font-weight:bold;">length</span> file
  <span style="color:#45ae34;font-weight:bold;">return</span> file
</pre>
<p><span style="font-weight:400;">Recursion further promotes clean code (small functions) and is quite easy to work with when you think of it in terms of base-case and induction/normal case. An interesting thing is that a lot of principles and ideas can be transferred to other languages. </span></p>
<h1><span style="font-weight:400;">Transferable Knowledge</span></h1>
<p><span style="font-weight:400;">One example of a transferable idea is solving problems through composition of many small functions, this can be used in JavaScript (eg. using </span><a href="https://github.com/lodash/lodash/wiki/FP-Guide"><span style="font-weight:400;">Lodash-fp</span></a><span style="font-weight:400;"> or </span><a href="http://ramdajs.com/"><span style="font-weight:400;">Ramda</span></a><span style="font-weight:400;">) quite easily. Composition promotes having many small functions solving simple subproblems, and does often result in cleaner code. </span></p>
<p><span style="font-weight:400;">It doesn’t end here, </span><a href="https://drboolean.gitbooks.io/mostly-adequate-guide/content/ch7.html#tales-from-the-cryptic">Hindley-Milner</a><span style="font-weight:400;"> type signatures might be worth to use in JavaScript as well, even if they aren’t used for more than documentation. Without them all the functions you end up with can be quite difficult to read. </span></p>
<p><span style="font-weight:400;">Currying is easy to use in JavaScript (eg. with Lodash-fp or Ramda). I think I would go as far as to say that composition is not especially useful without curried functions. </span></p>
<p><span style="font-weight:400;">It is important to be aware of differences between Haskell and other languages though. For example lazy evaluation is a quite unique feature of Haskell, another feature is </span><a href="http://stackoverflow.com/questions/310974/what-is-tail-call-optimization"><span style="font-weight:400;">tail call optimization</span></a><span style="font-weight:400;">, which means that you can use recursion without constantly worrying about your stack blowing up. I think there are a lot of other transferable learnings, but they are a bit deeper and you simply have to code Haskell to learn them. If you don&#8217;t want to walk the path via Haskell, for JavaScript you might find <a href="https://drboolean.gitbooks.io/mostly-adequate-guide">Professor Frisby&#8217;s Mostly Adequate Guide to Functional Programming</a> useful. </span></p>
<h1><span style="font-weight:400;">Final Words</span></h1>
<p><span style="font-weight:400;">I would like to encourage every programmer to experiment with different languages and concepts. It is easy to just use what is immediately required for your daily job. But you miss out on a lot of ideas from other languages and risk getting caught in a small bubble, hindering you from developing as a developer. </span></p>
<p><span style="font-weight:400;">At Small Improvements we get to spend around 20% of our time doing other things such as fixing pet peeves and working on side-projects (for example this one). In addition to this we have </span><a href="https://tech.small-improvements.com/2016/08/15/hack-it-ship-it/"><span style="font-weight:400;">hackathons and ship-it weeks</span></a><span style="font-weight:400;">. I would recommend every company to introduce these kind of events, because I don’t think I’m the only developer who would agree with that programming is way more fun when you keep learning new things and growing as a developer. </span></p>
<p><span style="font-weight:400;">To be a good developer you need to keep learning and don’t be afraid of not being instantly awesome when picking up something new. Keep exploring the beautiful world of coding!</span></p><br />  <a rel="nofollow" href="http://feeds.wordpress.com/1.0/gocomments/smallimprovementstech.wordpress.com/2678/"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/smallimprovementstech.wordpress.com/2678/" /></a> <img alt="" border="0" src="https://pixel.wp.com/b.gif?host=tech.small-improvements.com&#038;blog=44218990&#038;post=2678&#038;subd=smallimprovementstech&#038;ref=&#038;feed=1" width="1" height="1" />]]></content:encoded>
		
		<media:thumbnail url="https://smallimprovementstech.files.wordpress.com/2016/11/screen-shot-2016-12-02-at-14-43-09.png" />
		<media:content url="http://smallimprovementstech.files.wordpress.com/2016/11/screen-shot-2016-12-02-at-14-43-09.png" medium="image">
			<media:title type="html">screen-shot-2016-12-02-at-14-43-09</media:title>
		</media:content>

		<media:content url="http://0.gravatar.com/avatar/cdfa4c0759926eb266588b213e3acc59?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">petercrona</media:title>
		</media:content>

		<media:content url="http://smallimprovementstech.files.wordpress.com/2016/11/screen-shot-2016-12-02-at-14-43-09.png" medium="image">
			<media:title type="html">Screen Shot 2016-12-02 at 14.43.09.png</media:title>
		</media:content>
	</item>
		<item>
		<title>Onboarding your Team to React + Redux</title>
		<link>https://tech.small-improvements.com/2016/10/18/onboarding-your-team-to-react-redux/</link>
		<pubDate>Tue, 18 Oct 2016 17:53:58 +0000</pubDate>
		<dc:creator><![CDATA[Robin Wieruch]]></dc:creator>
				<category><![CDATA[JavaScript]]></category>

		<guid isPermaLink="false">http://tech.small-improvements.com/?p=2638</guid>
		<description><![CDATA[Eventually the time will come when your team wants to use React + Redux for their frontend stack. We made that commitment some time ago at Small Improvements &#8211; we never had to regret it. As we come from an Angular 1.x frontend application, we needed to decide between React (+ ecosystem) and Angular 2. &#8230; <a href="https://tech.small-improvements.com/2016/10/18/onboarding-your-team-to-react-redux/" class="more-link">Continue reading <span class="screen-reader-text">Onboarding your Team to React +&#160;Redux</span></a><img alt="" border="0" src="https://pixel.wp.com/b.gif?host=tech.small-improvements.com&#038;blog=44218990&#038;post=2638&#038;subd=smallimprovementstech&#038;ref=&#038;feed=1" width="1" height="1" />]]></description>
				<content:encoded><![CDATA[<p><img data-attachment-id="2640" data-permalink="https://tech.small-improvements.com/2016/10/18/onboarding-your-team-to-react-redux/onboarding/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2016/10/onboarding.png?w=700" data-orig-size="1444,935" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="onboarding" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2016/10/onboarding.png?w=700?w=300" data-large-file="https://smallimprovementstech.files.wordpress.com/2016/10/onboarding.png?w=700?w=700" class="alignnone size-full wp-image-2640" src="https://smallimprovementstech.files.wordpress.com/2016/10/onboarding.png?w=700" alt="react redux team" srcset="https://smallimprovementstech.files.wordpress.com/2016/10/onboarding.png?w=700 700w, https://smallimprovementstech.files.wordpress.com/2016/10/onboarding.png?w=1400 1400w, https://smallimprovementstech.files.wordpress.com/2016/10/onboarding.png?w=150 150w, https://smallimprovementstech.files.wordpress.com/2016/10/onboarding.png?w=300 300w, https://smallimprovementstech.files.wordpress.com/2016/10/onboarding.png?w=768 768w, https://smallimprovementstech.files.wordpress.com/2016/10/onboarding.png?w=1024 1024w" sizes="(max-width: 700px) 100vw, 700px"   /></p>
<p>Eventually the time will come when your team wants to use React + Redux for their frontend stack. We made that commitment some time ago at Small Improvements &#8211; we never had to regret it. As we come from an Angular 1.x frontend application, we needed to decide between React (+ ecosystem) and Angular 2. Staying with Angular 1.x was no option for our three teams. We saw too many benefits in other solutions like React e.g. to embrace functional programming. In the end we decided to go all the way with React + Redux, since most of our developers used it already in their side projects.</p>
<p>The article should give other teams or even companies some learnings and insights to have a smooth onboarding to the React + Redux ecosystem. While some learnings are applicable to React + Redux, others might be general insights about migrating to another technology.</p>
<h3>React before Redux</h3>
<p>In the beginning not everyone is familiar with React and its ecosystem. Give people time to understand, to experiment and to exchange thoughts. Introduce React without a state management library. Make use of the React lifecycle methods and internal state management (setState) to teach React itself. After a while you will want to introduce a state management library. It&#8217;s easy to get around an external library in smaller side projects, but it isn&#8217;t when you are contributing to a larger code base. In general don&#8217;t introduce a state management library when you don&#8217;t know the problem it solves for you.</p>
<h3>Introducing Redux</h3>
<p>In Angular state management got messy for us. Sharing state between components, watching state changes of components and services, storing server data &#8211; it was pretty soon a chaos. We knew the flaws of state management in Angular when the Flux pattern evolved. Perhaps that&#8217;s the cause why so many developers at Small Improvements got hooked by React + Redux eventually.</p>
<h3>Don&#8217;t overengineer Redux</h3>
<p>Once you started using Redux as state management library, don&#8217;t overengineer it. In the beginning the Redux ecosystem itself can be overwhelming. Moreover the way you deal with state management in Redux is different than what a lot of people are used to from the past. Again, like in React, give your team a chance to understand Redux. Not everyone will be already familiar with the overarching functional programming principals behind it.</p>
<p>Already one little library like <a href="https://github.com/acdlite/redux-actions">redux-actions</a> masks the excellence of Redux to stick to vanilla JavaScript. In redux-actions people might never experience plain actions and action creators. The functionality createAction camouflages some basic usage of Redux. Same goes for the handleActions helper function. People might never experience a plain Redux reducer which itself is plain JavaScript reducer function.</p>
<p>We love to use these little enhancements in Redux, but we made the mistake to introduce them too early. Nowadays it&#8217;s easy to npm install a package. Speak with your team about new packages. Don&#8217;t take from them the opportunity to learn it themselves.</p>
<h3>Understand it, before you use it</h3>
<p>Learn React before using Redux. In <a href="https://github.com/reactjs/react-redux">react-redux</a> you use the connect functionality to literally connect the Redux store to your React components. The Provider component at the root level makes sure that the store is passed as context to the underlying components. Thus you can retrieve the store state in mapStateToProps and pass dispatchable actions on the store to your components in mapDispatchToProps.</p>
<p>But what is the connect doing there? It&#8217;s too easy to simply call it magic. When learning React before using Redux, you can make sure that everyone in your team understands the concept of <a href="https://gist.github.com/sebmarkbage/ef0bf1f338a7182b6775">higher order components (HOC)</a>. After that everyone has the chance to reproduce the underlying mechanics of connect in react-redux. Eventually everyone is aware of the hidden Redux store in the React context.</p>
<h3>Asynchronous Actions</h3>
<p>We decided to use <a href="https://github.com/yelouafi/redux-saga">redux-saga</a> as we had to introduce asynchronous actions. In our case some people already used it before and felt that it is a great match. After some time using it, we don&#8217;t regret to handle our side effects with generators.</p>
<p>But what is the best approach to introduce asynchronous actions? Not everyone is aware of generators after all and it might add yet another level of complexity. <a href="https://github.com/gaearon/redux-thunk">Redux-thunk</a> is a great way to begin with asynchronous actions. It allows you to dispatch delayed actions. When the whole team feels comfortable with asynchronous actions, you should decide whether you want to experiment with another solution. The way to deal with asynchronous actions should be a recurring discussion topic until you make the final decision. Otherwise you will delay the decision and end up with bigger refactorings of your asynchronous layer.</p>
<h3>Normalize your data?</h3>
<p>We don&#8217;t normalize our data, even if we were aware of the aspect to keep a flat state in Redux. It was no unconscious decision to keep a deep nested state. Since we already have a large Angular 1.x application, we are used to most of the data structures. In our case it would expand the gap between the two worlds, because we would have to get used to two different data structures. Once we introduce new data structures, we keep the state flat from the beginning. We are not sure yet whether it was a bad (unconscious) decision. Still we feel comfortable to keep our deep nested state immutable by using ES6 spread operators. Moreover reducer tests with <a href="https://github.com/substack/deep-freeze">deep-freeze</a> help to ensure immutability.</p>
<h3>Feature Folders</h3>
<p>In the beginning we had a technical folder separation. Everyone is used to it from React + Redux tutorials. We had folders for reducers, actions, components, constants etc. Very early we noticed that the approach would never scale with independent teams. We decided to have feature folders. Now we have packages with clear boundaries. Take for instance a Table component package:</p>
<pre>
--Table/
----index.js
----components/
------Table/
--------index.js
--------container.js
--------presenter.js
--------style.less
------Cell/
--------index.js
--------presenter.js
--------spec.js
------Row/
--------index.js
--------presenter.js
--------spec.js
----ducks/
------index.js
------filter
--------index.js
--------spec.js
------sort
--------index.js
--------spec.js
------select
--------index.js
--------spec.js
</pre>
<p>One index file gives an entry point to each package. The ducks index file still exposes all necessary action creators and reducers. When another package wants to dispatch a Table action, it has to import it from &#8220;Table&#8221; and not from &#8220;Table/ducks&#8221;. The package has clear boundaries.</p>
<h3>Ducks Everywhere</h3>
<p>&#8220;I saw you are using <a href="https://github.com/erikras/ducks-modular-redux">ducks</a>?&#8221; Yes. We decided to use them when we introduced feature folders. The advantage is to have everything in one place. But once you introduce ducks, you should decide on best practices to keep the duck files tidy. Standardize your naming for reducer and action creator functions to distinguish them.</p>
<p>Moreover we noticed that ducks don&#8217;t scale very well for us. The lines of code grew very fast. That&#8217;s why we decided to split up the ducks responsibilities in smaller domains, like you can see in the ducks folder for the Table in the example above.</p>
<h3>What about boundaries to legacy frameworks?</h3>
<p>It&#8217;s silly that we call Angular 1.x already legacy, but that&#8217;s JavaScript today. Still we had to figure out how to connect both worlds.</p>
<p>ReactDOM.render() is all you need to have a React component tree in Angular. Moreover you can simply use the <a href="https://github.com/reactjs/react-redux">react-redux</a> Provider component to pass the imported Redux singleton store as context to the component tree. You can dispatch actions on the store and get the state from everywhere, since you only need to import the store in your non React world.</p>
<p>The other way around we use a helper to render Angular components in React. Once you have a large code base with complex non React components, you can&#8217;t easily rewrite them all at once. That approach ensures us a stable migration from Angular 1.x to React. We can still reuse Angular components. Once we refactor one component from Angular to React, we can easily exchange the component in one place.</p>
<h3>What about a synced cache to the legacy framework?</h3>
<p>In the beginning we experimented with Relay to facilitate caching of our backend data. Even more we had attempts to make <a href="https://tech.small-improvements.com/2016/02/25/angular-2-and-relay/">Relay independent of React</a> to use it in Angular as well. But very soon Relay felt like a foreign object in React to us. We stopped the experiment to use Relay + GraphQL and remained with using our RESTful solution.</p>
<p>Still we had to figure out how to cache the server side data in our single page React + Angular application. Since we already used an own store architecture in Angular, we synced the stores to the Redux store. Everything we implement in the future uses the Redux store, but our old Angular pages still get the cached data from our store architecture.</p>
<p>Moreover we introduced <a href="https://github.com/petercrona/ladda">ladda</a> to cache requests to our API. It&#8217;s an in-house solution by one of our developers, which will get open sourced properly. Ladda introduces a JavaScript data fetching layer with caching without dependencies. You can easily make requests in Angular or React.</p>
<h3>Hack &amp; Tell</h3>
<p>You read a lot about giving people time to understand the ecosystem properly. Your whole team is sitting in the same boat when introducing something novel. Everyone tries to accomplish a scalable and maintainable code base in the new ecosystem. At <a href="https://www.small-improvements.com/careers">Small Improvements</a> we are having weekly Hack &amp; Tells to exchange our recent gatherings. We share learnings to get a mutual understanding of doing things in React + Redux. In general those Hack &amp; Tells don&#8217;t apply necessarily to one technology.</p>
<p>Knowledge you could exchange in a weekly Hack &amp; Tell:</p>
<ul>
<li>best practices</li>
<li>patterns</li>
<li>decisions like naming, folder structure etc.</li>
<li>reusable components / feature packages</li>
<li>new npm modules which solve a real problem in your code base</li>
<li>recent pull requests</li>
</ul>
<p>Perhaps once a week isn&#8217;t even enough to exchange knowledge in a whole new ecosystem. Our code base is scaling well, even though we feel that we could refactor all the time. We don&#8217;t regret the step to migrate from Angular to React and its ecosystem.</p><br />  <a rel="nofollow" href="http://feeds.wordpress.com/1.0/gocomments/smallimprovementstech.wordpress.com/2638/"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/smallimprovementstech.wordpress.com/2638/" /></a> <img alt="" border="0" src="https://pixel.wp.com/b.gif?host=tech.small-improvements.com&#038;blog=44218990&#038;post=2638&#038;subd=smallimprovementstech&#038;ref=&#038;feed=1" width="1" height="1" />]]></content:encoded>
		
		<media:content url="http://2.gravatar.com/avatar/bd4020c0353cba7ad4d3ce35f028234c?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">rwieruch</media:title>
		</media:content>

		<media:content url="http://smallimprovementstech.files.wordpress.com/2016/10/onboarding.png" medium="image">
			<media:title type="html">react redux team</media:title>
		</media:content>
	</item>
		<item>
		<title>Building the Activity Stream. Part 1: Product Design</title>
		<link>https://tech.small-improvements.com/2016/09/30/building-the-activity-stream-part-1-product-design/</link>
		<pubDate>Fri, 30 Sep 2016 08:46:54 +0000</pubDate>
		<dc:creator><![CDATA[Per Fragemann]]></dc:creator>
				<category><![CDATA[How we work]]></category>
		<category><![CDATA[UX]]></category>

		<guid isPermaLink="false">http://tech.small-improvements.com/?p=2575</guid>
		<description><![CDATA[We recently launched our new Activity Stream. What began as a small idea turned into quite the large engineering undertaking. The results are astonishing, but it was a lot of hard work. In this part we&#8217;ll share how the design took shape. &#160; Whiteboard and paper drawings Each larger project at Small Improvements begins with &#8230; <a href="https://tech.small-improvements.com/2016/09/30/building-the-activity-stream-part-1-product-design/" class="more-link">Continue reading <span class="screen-reader-text">Building the Activity Stream. Part 1: Product&#160;Design</span></a><img alt="" border="0" src="https://pixel.wp.com/b.gif?host=tech.small-improvements.com&#038;blog=44218990&#038;post=2575&#038;subd=smallimprovementstech&#038;ref=&#038;feed=1" width="1" height="1" />]]></description>
				<content:encoded><![CDATA[<p><strong>We recently <a href="https://blog.small-improvements.com/2016/09/16/new-activity-stream/">launched our new Activity Stream</a>. What began as a small idea turned into quite the large engineering undertaking. The results are astonishing, but it was a lot of hard work. In this part we&#8217;ll share how the design took shape.<br />
</strong></p>
<p>&nbsp;</p>
<div class="x-container max width">
<div class="x-column x-sm x-1-2">
<h3 class="h-custom-headline mtn h4">Whiteboard and paper drawings</h3>
<div class="x-text">
<p>Each larger project at Small Improvements begins with a rough written draft, and a kickoff meeting that involves PM, developers, designers and a customer-team person. User stories are extracted, prioritised and then broken down into manageable MVP plus one or two &#8220;expansion releases&#8221; so it&#8217;s clear they are not part of the original release. Then the product design work starts (and if needed, we&#8217;ll conduct  some code exploration too to rule out major obstacles)</p>
<p>We use whiteboards and paper drawings to try out ideas, discuss and iterate quickly. Here are some of the many initial ideas for how to represent complex concepts like our cycles in a changelog:</p>
<p><img data-attachment-id="2622" data-permalink="https://tech.small-improvements.com/2016/09/30/building-the-activity-stream-part-1-product-design/as-paper/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2016/09/as-paper.jpg?w=700" data-orig-size="1200,780" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;1&quot;}" data-image-title="as-paper" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2016/09/as-paper.jpg?w=700?w=300" data-large-file="https://smallimprovementstech.files.wordpress.com/2016/09/as-paper.jpg?w=700?w=700" class="alignnone size-full wp-image-2622" src="https://smallimprovementstech.files.wordpress.com/2016/09/as-paper.jpg?w=700" alt="as-paper.jpg" srcset="https://smallimprovementstech.files.wordpress.com/2016/09/as-paper.jpg?w=700 700w, https://smallimprovementstech.files.wordpress.com/2016/09/as-paper.jpg?w=150 150w, https://smallimprovementstech.files.wordpress.com/2016/09/as-paper.jpg?w=300 300w, https://smallimprovementstech.files.wordpress.com/2016/09/as-paper.jpg?w=768 768w, https://smallimprovementstech.files.wordpress.com/2016/09/as-paper.jpg?w=1024 1024w, https://smallimprovementstech.files.wordpress.com/2016/09/as-paper.jpg 1200w" sizes="(max-width: 700px) 100vw, 700px"   /></p>
</div>
</div>
<div class="x-column x-sm x-1-2"></div>
</div>
<div class="x-container max width">
<div class="x-column x-sm x-1-2">
<h3 class="h-custom-headline mtn h4"></h3>
<h3 class="h-custom-headline mtn h4">Wireframes</h3>
<div class="x-text">
<p>Lots of future problems can be avoided by coming up with good quality wireframes. So after the paper scribbles were done, we went to paint proper wireframes. Here are two examples of how we described the overall architecture of the activity stream, then followed by an actual sample wireframe.</p>
</div>
</div>
<div class="x-column x-sm x-1-2"><img data-attachment-id="2590" data-permalink="https://tech.small-improvements.com/2016/09/30/building-the-activity-stream-part-1-product-design/wireframe-1/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2016/10/wireframe-1.png?w=700" data-orig-size="1440,922" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="wireframe-1" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2016/10/wireframe-1.png?w=700?w=300" data-large-file="https://smallimprovementstech.files.wordpress.com/2016/10/wireframe-1.png?w=700?w=700" class="alignnone size-full wp-image-2590" src="https://smallimprovementstech.files.wordpress.com/2016/10/wireframe-1.png?w=700" alt="wireframe 1.png" srcset="https://smallimprovementstech.files.wordpress.com/2016/10/wireframe-1.png?w=700 700w, https://smallimprovementstech.files.wordpress.com/2016/10/wireframe-1.png?w=1400 1400w, https://smallimprovementstech.files.wordpress.com/2016/10/wireframe-1.png?w=150 150w, https://smallimprovementstech.files.wordpress.com/2016/10/wireframe-1.png?w=300 300w, https://smallimprovementstech.files.wordpress.com/2016/10/wireframe-1.png?w=768 768w, https://smallimprovementstech.files.wordpress.com/2016/10/wireframe-1.png?w=1024 1024w" sizes="(max-width: 700px) 100vw, 700px"   /></div>
</div>
<div class="x-column x-sm x-1-2"></div>
<div class="x-container max width">
<div class="x-column x-sm x-1-2">
<p><img data-attachment-id="2593" data-permalink="https://tech.small-improvements.com/2016/09/30/building-the-activity-stream-part-1-product-design/wireframe-2/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2016/10/wireframe-2.png?w=700" data-orig-size="1446,977" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="wireframe-2" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2016/10/wireframe-2.png?w=700?w=300" data-large-file="https://smallimprovementstech.files.wordpress.com/2016/10/wireframe-2.png?w=700?w=700" class="alignnone size-full wp-image-2593" src="https://smallimprovementstech.files.wordpress.com/2016/10/wireframe-2.png?w=700" alt="wireframe 2.png" srcset="https://smallimprovementstech.files.wordpress.com/2016/10/wireframe-2.png?w=700 700w, https://smallimprovementstech.files.wordpress.com/2016/10/wireframe-2.png?w=1400 1400w, https://smallimprovementstech.files.wordpress.com/2016/10/wireframe-2.png?w=150 150w, https://smallimprovementstech.files.wordpress.com/2016/10/wireframe-2.png?w=300 300w, https://smallimprovementstech.files.wordpress.com/2016/10/wireframe-2.png?w=768 768w, https://smallimprovementstech.files.wordpress.com/2016/10/wireframe-2.png?w=1024 1024w" sizes="(max-width: 700px) 100vw, 700px"   /></p>
</div>
</div>
<p>&nbsp;</p>
<p>We don’t take wireframes <em>too</em> seriously of course. Wireframes are a plan, not a committment to the future product, and everything is still up for change.</p>
<p>Also, quite often the <em>real</em> challenge lies in the user <em>flow</em>, not just in screen design. Some flows can be simulated at the whiteboard or by moving paper pieces around, but we typically move to InVision quickly. Using a web-based tool allows us to create actual clickable prototypes, and get insight from other (possibly remote) staff easily.</p>
<p>&nbsp;</p>
<div class="x-container max width">
<div class="x-column x-sm x-1-2">
<h3 class="h-custom-headline mtn h4">Mockups</h3>
<div class="x-text">
<p>A high fidelity image can raise unrealistic expectations (“oh look we’re almost done”) or draw attention to the wrong details (“why are there 20px margin, shouldn’t it be 30px?”). But on the other hand, the more realistic our mockups look like, the more and better feedback we get from outside the core team.</p>
<p>It’s not about pixel perfection at this stage, everything can still get adjusted. But it <em>is</em> about making things feel “real” sooner than later, so that staff feel encouraged to give feedback about the flows, and so that early access customers feel they are actually commenting on something we are serious about. So we quite like our high fidelity mockups!</p>
<p>&nbsp;</p>
</div>
</div>
<div class="x-column x-sm x-1-2"><img data-attachment-id="2594" data-permalink="https://tech.small-improvements.com/2016/09/30/building-the-activity-stream-part-1-product-design/mockup-comment/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2016/10/mockup-comment.png?w=700" data-orig-size="2130,1392" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="mockup-comment" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2016/10/mockup-comment.png?w=700?w=300" data-large-file="https://smallimprovementstech.files.wordpress.com/2016/10/mockup-comment.png?w=700?w=700" class="alignnone size-full wp-image-2594" src="https://smallimprovementstech.files.wordpress.com/2016/10/mockup-comment.png?w=700" alt="mockup-comment.png" srcset="https://smallimprovementstech.files.wordpress.com/2016/10/mockup-comment.png?w=700 700w, https://smallimprovementstech.files.wordpress.com/2016/10/mockup-comment.png?w=1400 1400w, https://smallimprovementstech.files.wordpress.com/2016/10/mockup-comment.png?w=150 150w, https://smallimprovementstech.files.wordpress.com/2016/10/mockup-comment.png?w=300 300w, https://smallimprovementstech.files.wordpress.com/2016/10/mockup-comment.png?w=768 768w, https://smallimprovementstech.files.wordpress.com/2016/10/mockup-comment.png?w=1024 1024w" sizes="(max-width: 700px) 100vw, 700px"   /></div>
</div>
<div class="x-container max width">
<div class="x-column x-sm x-1-1">
<p class="h-custom-headline mtn h4">(The above is just a screenshot, but we typically make mockups <em>clickable</em> so it&#8217;s clearer what action takes you where)</p>
<h3 class="h-custom-headline mtn h4"></h3>
<h3 class="h-custom-headline mtn h4">Code level prototypes</h3>
<div class="x-text">
<p>We prefer to not write lots of &#8220;real&#8221; code before there has been <em>some</em> agreement on the flows between screens. Yes we’re agile, and yes we can make changes down the track. But starting to code user flows <em>without</em> first sketching them has failed us too often.</p>
<p>So once we start coding the frontend, we have a somewhat good grasp of a feature, and this makes coding quicker, and styling is also more fun when you don&#8217;t have to fear everything changes totally next week.</p>
<p>As designers we love to get down and dirty at the UI level too. But it’s not scaleable to be positioning every button ourselves. We invest time teaching design principles to frontend developers, and make everyone follows <a href="https://tech.small-improvements.com/2016/07/05/creating-a-si-style-guide/">our living style guide, </a>so we can focus on the advanced stuff, not on placing basic buttons.</p>
<p>&nbsp;</p>
</div>
</div>
</div>
<div class="x-container max width">
<div class="x-column x-sm x-1-2">
<h3 class="h-custom-headline mtn h4">User testing</h3>
<div class="x-text">
<p>Once a feature has been developed to alpha stage, it’s time for user testing. We aim for conducting some some 5 to 10 “successful” user tests for larger features or changes. If user tests show there are major problems in our designs, then we reset the counter, keep adjusting the design, and schedule further user tests.</p>
<p>We prefer a combination of tests. On one hand we like watching experienced customers explore their <em>existing</em> content with new features enabled. On the other hand we like scenario-driven tests where we present users with concrete tasks, using a synthetic demo content setup (so people aren&#8217;t afraid to break things). Both have their place, but usertesting is such a complex beast that we&#8217;ll blog about it separately. <img src="https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p>&nbsp;</p>
<h3>Launch</h3>
</div>
</div>
<p>When the tests confirm that a feature works, it is time for the polishing phase, and we&#8217;ll gradually enable features to our beta program customers. After another round of feedback, answering questions and polishing, it&#8217;s time for a wider rollout to clients who didn&#8217;t sign up for the beta. Now proper documentation needs to be written, blogged, and announced in-app using Intercom or home-made hints.</p>
</div>
<div class="x-container max width">
<div class="x-column x-sm x-1-2">
<div class="x-text">
<p>And then it’s time to roll out for real and celebrate!</p>
<p><img data-attachment-id="2597" data-permalink="https://tech.small-improvements.com/2016/09/30/building-the-activity-stream-part-1-product-design/celebrate/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2016/10/celebrate.jpg?w=700" data-orig-size="2048,1365" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="celebrate" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2016/10/celebrate.jpg?w=700?w=300" data-large-file="https://smallimprovementstech.files.wordpress.com/2016/10/celebrate.jpg?w=700?w=700" class="alignnone size-full wp-image-2597" src="https://smallimprovementstech.files.wordpress.com/2016/10/celebrate.jpg?w=700" alt="celebrate.jpg" srcset="https://smallimprovementstech.files.wordpress.com/2016/10/celebrate.jpg?w=700 700w, https://smallimprovementstech.files.wordpress.com/2016/10/celebrate.jpg?w=1400 1400w, https://smallimprovementstech.files.wordpress.com/2016/10/celebrate.jpg?w=150 150w, https://smallimprovementstech.files.wordpress.com/2016/10/celebrate.jpg?w=300 300w, https://smallimprovementstech.files.wordpress.com/2016/10/celebrate.jpg?w=768 768w, https://smallimprovementstech.files.wordpress.com/2016/10/celebrate.jpg?w=1024 1024w" sizes="(max-width: 700px) 100vw, 700px"   /></p>
</div>
<p>&nbsp;</p>
</div>
</div><br />  <a rel="nofollow" href="http://feeds.wordpress.com/1.0/gocomments/smallimprovementstech.wordpress.com/2575/"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/smallimprovementstech.wordpress.com/2575/" /></a> <img alt="" border="0" src="https://pixel.wp.com/b.gif?host=tech.small-improvements.com&#038;blog=44218990&#038;post=2575&#038;subd=smallimprovementstech&#038;ref=&#038;feed=1" width="1" height="1" />]]></content:encoded>
		
		<media:content url="http://1.gravatar.com/avatar/47d0b6b800754b8a4b352e55ef30175d?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">smallimprove</media:title>
		</media:content>

		<media:content url="http://smallimprovementstech.files.wordpress.com/2016/09/as-paper.jpg" medium="image">
			<media:title type="html">as-paper.jpg</media:title>
		</media:content>

		<media:content url="http://smallimprovementstech.files.wordpress.com/2016/10/wireframe-1.png" medium="image">
			<media:title type="html">wireframe 1.png</media:title>
		</media:content>

		<media:content url="http://smallimprovementstech.files.wordpress.com/2016/10/wireframe-2.png" medium="image">
			<media:title type="html">wireframe 2.png</media:title>
		</media:content>

		<media:content url="http://smallimprovementstech.files.wordpress.com/2016/10/mockup-comment.png" medium="image">
			<media:title type="html">mockup-comment.png</media:title>
		</media:content>

		<media:content url="http://smallimprovementstech.files.wordpress.com/2016/10/celebrate.jpg" medium="image">
			<media:title type="html">celebrate.jpg</media:title>
		</media:content>
	</item>
		<item>
		<title>Running our App Engine Application in the Flexible Environment (Java 8)</title>
		<link>https://tech.small-improvements.com/2016/09/12/running-our-app-engine-application-in-the-flexible-environment-java-8/</link>
		<pubDate>Mon, 12 Sep 2016 11:43:12 +0000</pubDate>
		<dc:creator><![CDATA[Michael Ruhwedel]]></dc:creator>
				<category><![CDATA[Google App Engine]]></category>
		<category><![CDATA[Java]]></category>

		<guid isPermaLink="false">http://tech.small-improvements.com/?p=1961</guid>
		<description><![CDATA[It&#8217;s no secret that we at Small Improvements love to use cutting edge technologies for our application. On the client side, there&#8217;s no limit, that&#8217;s why we&#8217;re rapidly transitioning to React. In the backend, we&#8217;re pushing the limits too, but we&#8217;re currently bound by what the App Engine has to offer. The main grievance for us is that &#8230; <a href="https://tech.small-improvements.com/2016/09/12/running-our-app-engine-application-in-the-flexible-environment-java-8/" class="more-link">Continue reading <span class="screen-reader-text">Running our App Engine Application in the Flexible Environment (Java&#160;8)</span></a><img alt="" border="0" src="https://pixel.wp.com/b.gif?host=tech.small-improvements.com&#038;blog=44218990&#038;post=1961&#038;subd=smallimprovementstech&#038;ref=&#038;feed=1" width="1" height="1" />]]></description>
				<content:encoded><![CDATA[<p>It&#8217;s no secret that we at Small Improvements love to use cutting edge technologies for our application. On the client side, there&#8217;s no limit, that&#8217;s why we&#8217;re rapidly transitioning to React. In the backend, we&#8217;re pushing the limits too, but we&#8217;re currently bound by what the App Engine has to offer. The main grievance for us is that we&#8217;re still using Java 7.</p>
<p>There are <a href="https://groups.google.com/forum/#!msg/google-appengine/8y80sEhr7Rc/66WnFoBvL3AJ">hints</a> that Google will bring Java 8 to the App Engine, but during <a href="https://tech.small-improvements.com/2016/08/15/hack-it-ship-it/">our recent Ship-It week</a>, we decided to take matters into our own hands and run Small Improvements on a Java 8 <a href="https://cloud.google.com/appengine/docs/flexible/">Flexible Runtime</a>, aka Flexible Environment or Managed VM, the name changes frequently ;).</p>
<p>If you never heard of the Flexible Runtime, it&#8217;s basically a Docker container that will run your App Engine application. To get started quickly, you can use Google&#8217;s <a href="https://cloud.google.com/appengine/docs/flexible/java/dev-jetty9-and-apis">Java 8 / Jetty 9.3 Compat Runtime</a> container without touching (or even seeing) any Dockerfile.</p>
<p>While Google <a href="https://github.com/GoogleCloudPlatform/appengine-java-vm-hello">provides</a> a <a href="https://github.com/GoogleCloudPlatform/appengine-java-vm-sudoku-sample">couple</a> of <a href="https://github.com/GoogleCloudPlatform/appengine-java-vm-hello">Hello World</a> examples, this won&#8217;t help you much when your app won&#8217;t start and you can&#8217;t figure out why.</p>
<p>If you&#8217;re like us and prefer to use the <a href="https://cloud.google.com/sdk/">Cloud SDK</a> to deploy over Maven, please read on and I&#8217;ll show you how we managed to get our app running.</p>
<p><strong>Caveat:</strong> It&#8217;ll work, but it’s definitely not quite production ready. We wouldn&#8217;t recommend it for your main app, but if you have a non-mission critical service,  you could give it a shot.</p>
<h2>Bye bye XML! Hello YAML!</h2>
<p>XML was quite nifty when it was introduced 20 years ago. But YAML is so much easier on the eyes.</p>
<p>Lucky for us, the Flexible Runtimes are configured by YAML files. You can generate them from your exploded App Engine project using <a href="https://cloud.google.com/appengine/docs/java/tools/appcfg-arguments">appcfg.sh</a> which is included in <a href="https://cloud.google.com/appengine/downloads#Google_App_Engine_SDK_for_Java">the Java SDK</a>:</p>
<pre class="brush: bash; gutter: false; title: ; notranslate">
appengine-java-sdk/bin/bin/appcfg.sh stage\
   your-exploded-app stage-directory
</pre>
<p>Have a look at the generated YAML files: Cron, Dispatch, Dos, Index and Queue. They should all be deployable and contain the exact same configuration as their XML counterparts.</p>
<p>To get <code>app.yaml</code> into production it requires some additional steps &#8230;..</p>
<h2>App.yaml and its gotchas</h2>
<h4>Static files &#8230; or not?</h4>
<p>Our generated <code>app.yaml</code> was a bit crude and yours might be too. For us, the static files and their expiration settings were very verbose:</p>
<pre class="brush: plain; gutter: false; title: ; notranslate">
- url: (/resources/.*\.jpg)
  static_files: __static__\1
  upload: __NOT_USED__
  require_matching_file: True
  login: optional
  secure: always
  expiration: 5d
- url: (/remote_api/.*\.jpg)
  static_files: __static__\1
  upload: __NOT_USED__
  require_matching_file: True
  login: optional
  secure: optional
  expiration: 21d
- url: (/api/tasks/.*\.jpg)
  static_files: __static__\1
  upload: __NOT_USED__
  require_matching_file: True
  login: admin
  secure: optional
  expiration: 21d
...
</pre>
<p>You&#8217;ll notice a lot of duplications. In our case so many, that the deploy failed since there is a hard limit for the number of entries :D. But no worries the handler syntax supports regular expressions.</p>
<p>So for example, you can configure the serving/caching of your and fonts and images in a single handler:</p>
<pre class="brush: plain; gutter: false; title: ; notranslate">
- url: (/.*\.(ttf|eot|svg|woff|gif|jpg|png|ico))
  static_files: __static__\1
  upload: __NOT_USED__
  require_matching_file: True
  secure: always
  expiration: 21d
</pre>
<p>It&#8217;s unclear if Google will support serving static files automagically in the Flexible Environment. Currently, they suggest that you upload the files to a <a href="https://cloud.google.com/appengine/docs/flexible/java/serving-static-files">cloud storage bucket</a> and serve them from there.</p>
<p>Our hope is that this is only an intermediate step. Who knows, they are not so forthcoming with their roadmap <img src="https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f609.png" alt="😉" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p>What we&#8217;ve gathered by monitoring the logs of our deployed app: Currently Flexible Environment deployments ignore the <code>static_files</code> handlers. So whatever you write in the handlers your application will still serve the files.</p>
<h4>Security Constraints</h4>
<p>If you have security constraints for your Servlets/Resources, you&#8217;ve expressed them so far in <code>web.xml</code>:</p>
<pre class="brush: xml; gutter: false; title: ; notranslate">
  &lt;security-constraint&gt;
      &lt;web-resource-collection&gt;
          &lt;url-pattern&gt;/admin/tasks/*&lt;/url-pattern&gt;
      &lt;/web-resource-collection&gt;

      &lt;auth-constraint&gt;
          &lt;role-name&gt;admin&lt;/role-name&gt;
      &lt;/auth-constraint&gt;
  &lt;/security-constraint&gt;
</pre>
<p>This won&#8217;t work in a Flexible Runtime. For us, it closed all the responses of the server unexpectedly. You can safely remove the constraints from this file and express them in <code>app.yaml</code>.</p>
<p>Here&#8217;s how the example from above looks in the <code>app.yaml</code>:</p>
<pre class="brush: plain; gutter: false; title: ; notranslate">
- url: /api/tasks/.*
  script: unused
  login: admin
</pre>
<h4>Selecting the Runtime</h4>
<p>The last missing piece is to actually configure your app to run in a Flexible Environment:</p>
<pre class="brush: plain; title: ; notranslate">
vm: true
runtime: java
runtime_config:
   jdk: openjdk8
   server: jetty9
threadsafe: True
resources:
  cpu: 4
</pre>
<p><strong>Line 1</strong> is the big switch that will let your app run in the Flexible Environment.<br />
<strong>Line 2</strong> will upgrade you to Java 8.<br />
<strong>Lines 3-5</strong> are optional, just in case you&#8217;d like to try different Java/Jetty combinations.<br />
<strong>Lines 7-8</strong> are specifying how powerful your <a href="https://cloud.google.com/compute/docs/machine-types">compute engine machine</a> is &#8211; and how expensive.</p>
<p>Check out <a href="https://cloud.google.com/appengine/docs/flexible/java/configuring-your-app-with-app-yaml">Google&#8217;s documentation</a> to  learn what other settings you can play with.</p>
<h2>Cleaning up</h2>
<h4>Remove the XML configurations</h4>
<p>Now that all your YAML files are ready, take off the training wheels and delete the following the XML configurations:</p>
<ul>
<li><code>cron.xml</code></li>
<li><code>queue.xml</code></li>
<li><code>datastore-indexes.xml</code></li>
<li><code>dos.xml</code></li>
</ul>
<h4>Bonus (almost) get rid of application-web.xml</h4>
<p>Whatever you&#8217;ve got in <code>application-web.xml</code> you can configure it in <code>app.yaml</code> now. Here are the only settings you&#8217;ll need to keep in there:</p>
<pre class="brush: xml; gutter: false; title: ; notranslate">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;appengine-web-app xmlns=&quot;http://appengine.google.com/ns/1.0&quot;&gt;
    &lt;vm&gt;true&lt;/vm&gt;
    &lt;threadsafe&gt;true&lt;/threadsafe&gt;
    &lt;sessions-enabled&gt;true&lt;/sessions-enabled&gt;
&lt;/appengine-web-app&gt;
</pre>
<h2>Test Run</h2>
<p>The <a href="https://cloud.google.com/sdk/">Cloud SDK</a> brings its own App Engine development server <code>dev_appserver.py</code>. You can use it to test your upgraded application in a Flexible Environment locally:</p>
<pre class="brush: plain; gutter: false; title: ; notranslate">
# install the dev_appserver.py
gcloud components update app-engine-python
dev_appserver.py stage-directory/app.yaml
</pre>
<p>If everything worked as expected, you&#8217;ll be able to access the <a href="http://localhost:8000/">development server</a>.</p>
<h2>Deployment (Fingers Crossed)</h2>
<p>For our deployment, we choose not to use the Maven plugin from Google&#8217;s examples (who would after getting rid of so many XML files <img src="https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f609.png" alt="😉" class="wp-smiley" style="height: 1em; max-height: 1em;" /> ).</p>
<p>You can elegantly use <a href="https://cloud.google.com/sdk/gcloud/reference/app/deploy">gcloud from the Cloud SDK to deploy:</a></p>
<pre class="brush: plain; gutter: false; title: ; notranslate">
cd stage-directory
gcloud\
  app deploy\
    --no-promote\
    --version=any-version\
    --project=your-project\
    app.yaml\
    cron.yaml\
    dispatch.yaml\
    dos.yaml\
    index.yaml\
    queue.yaml
</pre>
<p><strong>Congratulations you&#8217;ve upgraded your application to Java 8 and a modern Jetty!</strong></p>
<h2>So I can use Flexible Runtimes, or what?</h2>
<p>We&#8217;ve encountered a lot of errors before the deployment worked.</p>
<p>Sometimes the cloud build timed out. Or the generated <code>app.yaml</code> file broke the gcloud deploy. (Google support helped us patch the Python executable: Big thanks!)</p>
<p>The main problem we have is, that the deployment of our application &#8211; composed of two modules &#8211; is taking 15~18 minutes in the Flexible Environment. To put this in perspective: The regular re-build and deploy of our application is well below 10 minutes.</p>
<p>Also from the development perspective, we&#8217;re not ready to forgo the convenience of firing up a development server in <a href="https://plugins.jetbrains.com/plugin/4254">IntelliJ Idea</a>. The development server from the Cloud SDK is cool, but it would need some more tweaking to develop locally without a lot of restarts (read: too many <img src="https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f609.png" alt="😉" class="wp-smiley" style="height: 1em; max-height: 1em;" /> ).</p>
<h2>Conclusion</h2>
<p>All in all, it was a fun and interesting project for us. It&#8217;s good to see that our application can run on the latest stable Java version.</p>
<p>The Flexible Environment is still in beta and <strong>NOT</strong> production ready. It&#8217;s <strong>NOT</strong> covered by any SLA.</p>
<p>We decided to let a lesser important microservice run in the Flexible Environment. It doesn&#8217;t require many redeploys and has been happily serving for two months. So far it only had the forgivable quirk of logging to standard error instead of the request log.</p>
<p>Nevertheless, don&#8217;t be discouraged. If our instructions worked for you, you&#8217;ll be ready when Google finally ships the Flexible Runtime &#8230; we know we are <img src="https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><br />  <a rel="nofollow" href="http://feeds.wordpress.com/1.0/gocomments/smallimprovementstech.wordpress.com/1961/"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/smallimprovementstech.wordpress.com/1961/" /></a> <img alt="" border="0" src="https://pixel.wp.com/b.gif?host=tech.small-improvements.com&#038;blog=44218990&#038;post=1961&#038;subd=smallimprovementstech&#038;ref=&#038;feed=1" width="1" height="1" />]]></content:encoded>
		
		<media:thumbnail url="https://smallimprovementstech.files.wordpress.com/2016/09/completablefuture_in_java_8_.png" />
		<media:content url="http://smallimprovementstech.files.wordpress.com/2016/09/completablefuture_in_java_8_.png" medium="image">
			<media:title type="html">completablefuture_in_java_8_</media:title>
		</media:content>

		<media:content url="http://2.gravatar.com/avatar/89255815c9d0fabe0aef3955eb2ec93c?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">gonzorama</media:title>
		</media:content>
	</item>
		<item>
		<title>Hack It, Ship It!</title>
		<link>https://tech.small-improvements.com/2016/08/15/hack-it-ship-it/</link>
		<pubDate>Mon, 15 Aug 2016 07:39:39 +0000</pubDate>
		<dc:creator><![CDATA[Robin Wieruch]]></dc:creator>
				<category><![CDATA[How we work]]></category>

		<guid isPermaLink="false">http://tech.small-improvements.com/?p=1926</guid>
		<description><![CDATA[Small Improvements conducts Hackathons every few months which usually involves two days of hacking on an experimental project. Hacking doesn&#8217;t imply that it&#8217;s a &#8220;developers-only&#8221; affair either; other departments at Small Improvements like Customer Success and Marketing also get a chance to get experimental too. Hackathons usually give us a chance to really get creative &#8230; <a href="https://tech.small-improvements.com/2016/08/15/hack-it-ship-it/" class="more-link">Continue reading <span class="screen-reader-text">Hack It, Ship&#160;It!</span></a><img alt="" border="0" src="https://pixel.wp.com/b.gif?host=tech.small-improvements.com&#038;blog=44218990&#038;post=1926&#038;subd=smallimprovementstech&#038;ref=&#038;feed=1" width="1" height="1" />]]></description>
				<content:encoded><![CDATA[<p>Small Improvements conducts Hackathons every few months which usually involves two days of hacking on an experimental project. Hacking doesn&#8217;t imply that it&#8217;s a &#8220;developers-only&#8221; affair either; other departments at Small Improvements like Customer Success and Marketing also get a chance to get experimental too. Hackathons usually give us a chance to really get creative about novel concepts and ideas for the product and company. It is about coming together as people to grow as a team &#8211; something that we at Small Improvements value as an important part of internal culture.</p>
<h2>From Hackathon to Ship It Week</h2>
<p>Being creative with innovative ideas is great, but how would we actually Ship It? We introduced the Ship It Week as new concept to extend our occasional Hackathons from 2 days of hacking to 5 days more serious hacking! In the first two days we had our regular experimental Hackathon, but afterwards had to decide which projects were feasible to &#8220;ship&#8221; until the end of the week. In the context of a feature in the Small Improvements feature, ship would mean: going live for customers!</p>

<a href='https://tech.small-improvements.com/2016/08/15/hack-it-ship-it/shipit_week_august_2016_img_6265/#main'><img width="700" height="467" src="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6265.jpg?w=700&#038;h=467" class="attachment-large size-large" alt="" srcset="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6265.jpg?w=700&#038;h=467 700w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6265.jpg?w=1400 1400w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6265.jpg?w=150 150w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6265.jpg?w=300 300w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6265.jpg?w=768 768w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6265.jpg?w=1024 1024w" sizes="(max-width: 700px) 100vw, 700px" data-attachment-id="1928" data-permalink="https://tech.small-improvements.com/2016/08/15/hack-it-ship-it/shipit_week_august_2016_img_6265/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6265.jpg" data-orig-size="4906,3271" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;5&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;Canon EOS 6D&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;1470188822&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;50&quot;,&quot;iso&quot;:&quot;3200&quot;,&quot;shutter_speed&quot;:&quot;0.02&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Shipit_week_August_2016_IMG_6265" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6265.jpg?w=300" data-large-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6265.jpg?w=700&#038;h=467" /></a>
<a href='https://tech.small-improvements.com/2016/08/15/hack-it-ship-it/shipit_week_august_2016_img_6200/#main'><img width="700" height="467" src="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6200.jpg?w=700&#038;h=467" class="attachment-large size-large" alt="" srcset="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6200.jpg?w=700&#038;h=467 700w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6200.jpg?w=1400 1400w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6200.jpg?w=150 150w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6200.jpg?w=300 300w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6200.jpg?w=768 768w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6200.jpg?w=1024 1024w" sizes="(max-width: 700px) 100vw, 700px" data-attachment-id="1927" data-permalink="https://tech.small-improvements.com/2016/08/15/hack-it-ship-it/shipit_week_august_2016_img_6200/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6200.jpg" data-orig-size="5472,3648" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;3.2&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;Canon EOS 6D&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;1470096597&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;50&quot;,&quot;iso&quot;:&quot;2500&quot;,&quot;shutter_speed&quot;:&quot;0.00125&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Shipit_week_August_2016_IMG_6200" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6200.jpg?w=300" data-large-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6200.jpg?w=700&#038;h=467" /></a>
<a href='https://tech.small-improvements.com/2016/08/15/hack-it-ship-it/img_4689/#main'><img width="700" height="467" src="https://smallimprovementstech.files.wordpress.com/2016/08/img_4689.jpg?w=700&#038;h=467" class="attachment-large size-large" alt="" srcset="https://smallimprovementstech.files.wordpress.com/2016/08/img_4689.jpg?w=700&#038;h=467 700w, https://smallimprovementstech.files.wordpress.com/2016/08/img_4689.jpg?w=1400 1400w, https://smallimprovementstech.files.wordpress.com/2016/08/img_4689.jpg?w=150 150w, https://smallimprovementstech.files.wordpress.com/2016/08/img_4689.jpg?w=300 300w, https://smallimprovementstech.files.wordpress.com/2016/08/img_4689.jpg?w=768 768w, https://smallimprovementstech.files.wordpress.com/2016/08/img_4689.jpg?w=1024 1024w" sizes="(max-width: 700px) 100vw, 700px" data-attachment-id="1929" data-permalink="https://tech.small-improvements.com/2016/08/15/hack-it-ship-it/img_4689/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2016/08/img_4689.jpg" data-orig-size="5112,3408" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;2.5&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;Canon EOS 6D&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;1470045645&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;85&quot;,&quot;iso&quot;:&quot;125&quot;,&quot;shutter_speed&quot;:&quot;0.016666666666667&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="IMG_4689" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2016/08/img_4689.jpg?w=300" data-large-file="https://smallimprovementstech.files.wordpress.com/2016/08/img_4689.jpg?w=700&#038;h=467" /></a>

<p><span id="more-1926"></span></p>
<h2>How we did it!</h2>
<p>It was all about coming together: Coming together in the morning of the first day to have a breakfast in the office, coming together to pitch ideas for the hacking days, and coming together as teams to hack away and get creative.</p>

<a href='https://tech.small-improvements.com/2016/08/15/hack-it-ship-it/shipit_week_august_2016_img_6147/#main'><img width="700" height="467" src="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6147.jpg?w=700&#038;h=467" class="attachment-large size-large" alt="" srcset="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6147.jpg?w=700&#038;h=467 700w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6147.jpg?w=1400 1400w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6147.jpg?w=150 150w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6147.jpg?w=300 300w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6147.jpg?w=768 768w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6147.jpg?w=1024 1024w" sizes="(max-width: 700px) 100vw, 700px" data-attachment-id="1930" data-permalink="https://tech.small-improvements.com/2016/08/15/hack-it-ship-it/shipit_week_august_2016_img_6147/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6147.jpg" data-orig-size="5472,3648" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;3.5&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;Canon EOS 6D&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;1470072287&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;50&quot;,&quot;iso&quot;:&quot;4000&quot;,&quot;shutter_speed&quot;:&quot;0.008&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Shipit_week_August_2016_IMG_6147" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6147.jpg?w=300" data-large-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6147.jpg?w=700&#038;h=467" /></a>
<a href='https://tech.small-improvements.com/2016/08/15/hack-it-ship-it/shipit_week_august_2016_img_6158/#main'><img width="700" height="467" src="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6158.jpg?w=700&#038;h=467" class="attachment-large size-large" alt="" srcset="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6158.jpg?w=700&#038;h=467 700w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6158.jpg?w=1400 1400w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6158.jpg?w=150 150w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6158.jpg?w=300 300w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6158.jpg?w=768 768w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6158.jpg?w=1024 1024w" sizes="(max-width: 700px) 100vw, 700px" data-attachment-id="1931" data-permalink="https://tech.small-improvements.com/2016/08/15/hack-it-ship-it/shipit_week_august_2016_img_6158/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6158.jpg" data-orig-size="5472,3648" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;4&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;Canon EOS 6D&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;1470075323&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;50&quot;,&quot;iso&quot;:&quot;4000&quot;,&quot;shutter_speed&quot;:&quot;0.002&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Shipit_week_August_2016_IMG_6158" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6158.jpg?w=300" data-large-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6158.jpg?w=700&#038;h=467" /></a>
<a href='https://tech.small-improvements.com/2016/08/15/hack-it-ship-it/shipit_week_august_2016_img_6167/#main'><img width="700" height="467" src="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6167.jpg?w=700&#038;h=467" class="attachment-large size-large" alt="" srcset="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6167.jpg?w=700&#038;h=467 700w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6167.jpg?w=1400 1400w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6167.jpg?w=150 150w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6167.jpg?w=300 300w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6167.jpg?w=768 768w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6167.jpg?w=1024 1024w" sizes="(max-width: 700px) 100vw, 700px" data-attachment-id="1932" data-permalink="https://tech.small-improvements.com/2016/08/15/hack-it-ship-it/shipit_week_august_2016_img_6167/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6167.jpg" data-orig-size="5472,3648" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;4&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;Canon EOS 6D&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;1470076844&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;50&quot;,&quot;iso&quot;:&quot;2500&quot;,&quot;shutter_speed&quot;:&quot;0.00125&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Shipit_week_August_2016_IMG_6167" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6167.jpg?w=300" data-large-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6167.jpg?w=700&#038;h=467" /></a>

<p>Teams were generally made up of a mixture of people who didn&#8217;t usually work together. The team size varied from 2 to 4 people and included developers, but also marketing and customer success people. In cases where one person wanted to work on a particular project, but nobody is they were able to decide to join another team or have a solo attempt.</p>
<h2>Whiteboards, Food and Hangouts</h2>
<p>The week was full of discussions regarding ideas, concepts and implementations Some ideas were on paper, some floated around the office in collaborative discussion, and others got &#8216;visual&#8217; on the office whiteboards! Fortunately we had several of the latter spread across the office to brainstorm <em>shippable</em> projects.</p>

<a href='https://tech.small-improvements.com/2016/08/15/hack-it-ship-it/shipit_week_august_2016_img_6190/#main'><img width="700" height="467" src="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6190.jpg?w=700&#038;h=467" class="attachment-large size-large" alt="" srcset="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6190.jpg?w=700&#038;h=467 700w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6190.jpg?w=1400 1400w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6190.jpg?w=150 150w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6190.jpg?w=300 300w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6190.jpg?w=768 768w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6190.jpg?w=1024 1024w" sizes="(max-width: 700px) 100vw, 700px" data-attachment-id="1933" data-permalink="https://tech.small-improvements.com/2016/08/15/hack-it-ship-it/shipit_week_august_2016_img_6190/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6190.jpg" data-orig-size="5472,3648" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;3.5&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;Canon EOS 6D&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;1470079551&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;50&quot;,&quot;iso&quot;:&quot;2500&quot;,&quot;shutter_speed&quot;:&quot;0.0025&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Shipit_week_August_2016_IMG_6190" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6190.jpg?w=300" data-large-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6190.jpg?w=700&#038;h=467" /></a>
<a href='https://tech.small-improvements.com/2016/08/15/hack-it-ship-it/shipit_week_august_2016_img_6202/#main'><img width="700" height="467" src="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6202.jpg?w=700&#038;h=467" class="attachment-large size-large" alt="" srcset="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6202.jpg?w=700&#038;h=467 700w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6202.jpg?w=1400 1400w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6202.jpg?w=150 150w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6202.jpg?w=300 300w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6202.jpg?w=768 768w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6202.jpg?w=1024 1024w" sizes="(max-width: 700px) 100vw, 700px" data-attachment-id="1934" data-permalink="https://tech.small-improvements.com/2016/08/15/hack-it-ship-it/shipit_week_august_2016_img_6202/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6202.jpg" data-orig-size="5472,3648" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;3.2&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;Canon EOS 6D&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;1470096694&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;50&quot;,&quot;iso&quot;:&quot;2500&quot;,&quot;shutter_speed&quot;:&quot;0.000625&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Shipit_week_August_2016_IMG_6202" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6202.jpg?w=300" data-large-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6202.jpg?w=700&#038;h=467" /></a>
<a href='https://tech.small-improvements.com/2016/08/15/hack-it-ship-it/shipit_week_august_2016_img_6225/#main'><img width="700" height="467" src="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6225.jpg?w=700&#038;h=467" class="attachment-large size-large" alt="" srcset="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6225.jpg?w=700&#038;h=467 700w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6225.jpg?w=1400 1400w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6225.jpg?w=150 150w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6225.jpg?w=300 300w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6225.jpg?w=768 768w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6225.jpg?w=1024 1024w" sizes="(max-width: 700px) 100vw, 700px" data-attachment-id="1935" data-permalink="https://tech.small-improvements.com/2016/08/15/hack-it-ship-it/shipit_week_august_2016_img_6225/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6225.jpg" data-orig-size="5472,3648" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;2.8&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;Canon EOS 6D&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;1470178072&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;50&quot;,&quot;iso&quot;:&quot;2500&quot;,&quot;shutter_speed&quot;:&quot;0.004&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Shipit_week_August_2016_IMG_6225" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6225.jpg?w=300" data-large-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6225.jpg?w=700&#038;h=467" /></a>

<p>In the evenings we arranged to have some food together &#8211; mostly ordered in and devoured at the office. Drinks followed afterwards &#8211; we keep our fridge filled, with a great mix of alcoholic and non-alcoholic beverages!</p>

<a href='https://tech.small-improvements.com/2016/08/15/hack-it-ship-it/shipit_week_august_2016_img_6314/#main'><img width="700" height="467" src="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6314.jpg?w=700&#038;h=467" class="attachment-large size-large" alt="" srcset="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6314.jpg?w=700&#038;h=467 700w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6314.jpg?w=1400 1400w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6314.jpg?w=150 150w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6314.jpg?w=300 300w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6314.jpg?w=768 768w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6314.jpg?w=1024 1024w" sizes="(max-width: 700px) 100vw, 700px" data-attachment-id="1936" data-permalink="https://tech.small-improvements.com/2016/08/15/hack-it-ship-it/shipit_week_august_2016_img_6314/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6314.jpg" data-orig-size="5181,3454" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;2.2&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;Canon EOS 6D&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;1470190843&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;50&quot;,&quot;iso&quot;:&quot;4000&quot;,&quot;shutter_speed&quot;:&quot;0.003125&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Shipit_week_August_2016_IMG_6314" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6314.jpg?w=300" data-large-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6314.jpg?w=700&#038;h=467" /></a>
<a href='https://tech.small-improvements.com/2016/08/15/hack-it-ship-it/shipit_week_august_2016_img_6376/#main'><img width="700" height="467" src="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6376.jpg?w=700&#038;h=467" class="attachment-large size-large" alt="" srcset="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6376.jpg?w=700&#038;h=467 700w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6376.jpg?w=1400 1400w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6376.jpg?w=150 150w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6376.jpg?w=300 300w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6376.jpg?w=768 768w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6376.jpg?w=1024 1024w" sizes="(max-width: 700px) 100vw, 700px" data-attachment-id="1937" data-permalink="https://tech.small-improvements.com/2016/08/15/hack-it-ship-it/shipit_week_august_2016_img_6376/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6376.jpg" data-orig-size="5472,3648" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;2.2&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;Canon EOS 6D&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;1470362249&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;50&quot;,&quot;iso&quot;:&quot;2500&quot;,&quot;shutter_speed&quot;:&quot;0.008&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Shipit_week_August_2016_IMG_6376" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6376.jpg?w=300" data-large-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6376.jpg?w=700&#038;h=467" /></a>
<a href='https://tech.small-improvements.com/2016/08/15/hack-it-ship-it/shipit_week_august_2016_img_6335/#main'><img width="700" height="467" src="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6335.jpg?w=700&#038;h=467" class="attachment-large size-large" alt="" srcset="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6335.jpg?w=700&#038;h=467 700w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6335.jpg?w=1400 1400w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6335.jpg?w=150 150w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6335.jpg?w=300 300w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6335.jpg?w=768 768w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6335.jpg?w=1024 1024w" sizes="(max-width: 700px) 100vw, 700px" data-attachment-id="1943" data-permalink="https://tech.small-improvements.com/2016/08/15/hack-it-ship-it/shipit_week_august_2016_img_6335/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6335.jpg" data-orig-size="5472,3648" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;2.2&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;Canon EOS 6D&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;1470263704&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;50&quot;,&quot;iso&quot;:&quot;2500&quot;,&quot;shutter_speed&quot;:&quot;0.0125&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Shipit_week_August_2016_IMG_6335" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6335.jpg?w=300" data-large-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6335.jpg?w=700&#038;h=467" /></a>

<p>Since we have staff spread throughout the globe, we connected everyone via Google Hangouts in the evening for presentations. Sometimes we even eat together over the internet!</p>

<a href='https://tech.small-improvements.com/2016/08/15/hack-it-ship-it/shipit_week_august_2016_img_6276/#main'><img width="700" height="467" src="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6276.jpg?w=700&#038;h=467" class="attachment-large size-large" alt="" srcset="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6276.jpg?w=700&#038;h=467 700w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6276.jpg?w=1400 1400w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6276.jpg?w=150 150w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6276.jpg?w=300 300w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6276.jpg?w=768 768w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6276.jpg?w=1024 1024w" sizes="(max-width: 700px) 100vw, 700px" data-attachment-id="1940" data-permalink="https://tech.small-improvements.com/2016/08/15/hack-it-ship-it/shipit_week_august_2016_img_6276/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6276.jpg" data-orig-size="5472,3648" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;4.5&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;Canon EOS 6D&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;1470189095&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;50&quot;,&quot;iso&quot;:&quot;250&quot;,&quot;shutter_speed&quot;:&quot;0.016666666666667&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Shipit_week_August_2016_IMG_6276" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6276.jpg?w=300" data-large-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6276.jpg?w=700&#038;h=467" /></a>
<a href='https://tech.small-improvements.com/2016/08/15/hack-it-ship-it/shipit_week_august_2016_img_6268/#main'><img width="700" height="467" src="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6268.jpg?w=700&#038;h=467" class="attachment-large size-large" alt="" srcset="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6268.jpg?w=700&#038;h=467 700w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6268.jpg?w=1400 1400w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6268.jpg?w=150 150w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6268.jpg?w=300 300w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6268.jpg?w=768 768w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6268.jpg?w=1024 1024w" sizes="(max-width: 700px) 100vw, 700px" data-attachment-id="1939" data-permalink="https://tech.small-improvements.com/2016/08/15/hack-it-ship-it/shipit_week_august_2016_img_6268/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6268.jpg" data-orig-size="5472,3648" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;2&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;Canon EOS 6D&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;1470188917&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;50&quot;,&quot;iso&quot;:&quot;3200&quot;,&quot;shutter_speed&quot;:&quot;0.0015625&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Shipit_week_August_2016_IMG_6268" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6268.jpg?w=300" data-large-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6268.jpg?w=700&#038;h=467" /></a>
<a href='https://tech.small-improvements.com/2016/08/15/hack-it-ship-it/shipit_week_august_2016_img_6294/#main'><img width="700" height="467" src="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6294.jpg?w=700&#038;h=467" class="attachment-large size-large" alt="" srcset="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6294.jpg?w=700&#038;h=467 700w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6294.jpg?w=1400 1400w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6294.jpg?w=150 150w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6294.jpg?w=300 300w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6294.jpg?w=768 768w, https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6294.jpg?w=1024 1024w" sizes="(max-width: 700px) 100vw, 700px" data-attachment-id="1941" data-permalink="https://tech.small-improvements.com/2016/08/15/hack-it-ship-it/shipit_week_august_2016_img_6294/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6294.jpg" data-orig-size="5472,3648" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;3.2&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;Canon EOS 6D&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;1470190096&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;50&quot;,&quot;iso&quot;:&quot;3200&quot;,&quot;shutter_speed&quot;:&quot;0.016666666666667&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Shipit_week_August_2016_IMG_6294" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6294.jpg?w=300" data-large-file="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6294.jpg?w=700&#038;h=467" /></a>

<h2>Shippable Projects</h2>
<p>We used Trello to collect our ideas; later on we added more lanes to move our projects to the &#8216;Shipped&#8217; status. By Friday, some projects were already shipped! One project improved some of our internal infrastructure to provide a better Customer Success experience and another focused on freshening up the color scheme and updating objective icons and message badges within Small Improvements. You can read more about these changes in our recent <a href="https://blog.small-improvements.com/2016/08/08/new-objective-icons-badges-and-some-refreshing-colours/">feature release blog post</a>. Two other projects <a href="https://blog.small-improvements.com/2016/08/15/a-small-improvement-to-objective-cloning/">improved objective cloning</a> and <a href="https://blog.small-improvements.com/2016/09/21/sparkling-hidden-gems/">introduced guidance</a> in Small Improvements.</p>
<p><a href="https://smallimprovementstech.files.wordpress.com/2016/08/screen-shot-2016-08-12-at-15-16-48.png"><img data-attachment-id="1942" data-permalink="https://tech.small-improvements.com/2016/08/15/hack-it-ship-it/screen-shot-2016-08-12-at-15-16-48/#main" data-orig-file="https://smallimprovementstech.files.wordpress.com/2016/08/screen-shot-2016-08-12-at-15-16-48.png" data-orig-size="1401,915" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Screen Shot 2016-08-12 at 15.16.48" data-image-description="" data-medium-file="https://smallimprovementstech.files.wordpress.com/2016/08/screen-shot-2016-08-12-at-15-16-48.png?w=300" data-large-file="https://smallimprovementstech.files.wordpress.com/2016/08/screen-shot-2016-08-12-at-15-16-48.png?w=700&#038;h=457" class="alignnone size-large wp-image-1942" src="https://smallimprovementstech.files.wordpress.com/2016/08/screen-shot-2016-08-12-at-15-16-48.png?w=700&#038;h=457" alt="Screen Shot 2016-08-12 at 15.16.48" width="700" height="457" srcset="https://smallimprovementstech.files.wordpress.com/2016/08/screen-shot-2016-08-12-at-15-16-48.png?w=700&amp;h=457 700w, https://smallimprovementstech.files.wordpress.com/2016/08/screen-shot-2016-08-12-at-15-16-48.png?w=1400&amp;h=914 1400w, https://smallimprovementstech.files.wordpress.com/2016/08/screen-shot-2016-08-12-at-15-16-48.png?w=150&amp;h=98 150w, https://smallimprovementstech.files.wordpress.com/2016/08/screen-shot-2016-08-12-at-15-16-48.png?w=300&amp;h=196 300w, https://smallimprovementstech.files.wordpress.com/2016/08/screen-shot-2016-08-12-at-15-16-48.png?w=768&amp;h=502 768w, https://smallimprovementstech.files.wordpress.com/2016/08/screen-shot-2016-08-12-at-15-16-48.png?w=1024&amp;h=669 1024w" sizes="(max-width: 700px) 100vw, 700px" /></a></p>
<p>Watch our little interview of Lucas, one of our UI/UX designer, and his project:</p>
<div class="jetpack-video-wrapper"><div class="embed-vimeo" style="text-align: center;"><iframe src="https://player.vimeo.com/video/180569819" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></div></div>
<h2>Challenges</h2>
<p>The team spirit at Small Improvements is always great. Everyone helps out and even though there was lots to organize for the Ship It Week, you&#8217;re never on your own.</p>
<p>From a product perspective, our first Ship It Week helped us a lot to realize some smaller projects that had been on our plates for a long time. The feature roadmap at Small Improvements is always filled and a Hackathon always gives some time to work on something different.</p>
<p>Since we already had Hackathons at Small Improvements, we were used to only tackling single projects over a couple of days, but for the Ship It Week we experienced something different: 5 days was enough time to slot in several mini projects as a team.</p>
<h2>Taking Ownership</h2>
<p>Personally the Ship It Week was a new challenge and opportunity for me to grow not only in my profession as an engineer, but also to grow in my soft skills by organizing an eventful week. Last but not least it wasn&#8217;t me alone. It wouldn&#8217;t happen without such great people around one to contribute to a great Startup culture!</p><br />  <a rel="nofollow" href="http://feeds.wordpress.com/1.0/gocomments/smallimprovementstech.wordpress.com/1926/"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/smallimprovementstech.wordpress.com/1926/" /></a> <img alt="" border="0" src="https://pixel.wp.com/b.gif?host=tech.small-improvements.com&#038;blog=44218990&#038;post=1926&#038;subd=smallimprovementstech&#038;ref=&#038;feed=1" width="1" height="1" />]]></content:encoded>
		
		<media:thumbnail url="https://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6147.jpg" />
		<media:content url="http://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6147.jpg" medium="image">
			<media:title type="html">Shipit_week_August_2016_IMG_6147</media:title>
		</media:content>

		<media:content url="http://2.gravatar.com/avatar/bd4020c0353cba7ad4d3ce35f028234c?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">rwieruch</media:title>
		</media:content>

		<media:content url="http://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6265.jpg?w=700" medium="image" />

		<media:content url="http://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6200.jpg?w=700" medium="image" />

		<media:content url="http://smallimprovementstech.files.wordpress.com/2016/08/img_4689.jpg?w=700" medium="image" />

		<media:content url="http://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6147.jpg?w=700" medium="image" />

		<media:content url="http://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6158.jpg?w=700" medium="image" />

		<media:content url="http://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6167.jpg?w=700" medium="image" />

		<media:content url="http://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6190.jpg?w=700" medium="image" />

		<media:content url="http://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6202.jpg?w=700" medium="image" />

		<media:content url="http://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6225.jpg?w=700" medium="image" />

		<media:content url="http://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6314.jpg?w=700" medium="image" />

		<media:content url="http://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6376.jpg?w=700" medium="image" />

		<media:content url="http://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6335.jpg?w=700" medium="image" />

		<media:content url="http://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6276.jpg?w=700" medium="image" />

		<media:content url="http://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6268.jpg?w=700" medium="image" />

		<media:content url="http://smallimprovementstech.files.wordpress.com/2016/08/shipit_week_august_2016_img_6294.jpg?w=700" medium="image" />

		<media:content url="http://smallimprovementstech.files.wordpress.com/2016/08/screen-shot-2016-08-12-at-15-16-48.png?w=700" medium="image">
			<media:title type="html">Screen Shot 2016-08-12 at 15.16.48</media:title>
		</media:content>
	</item>
	</channel>
</rss>
